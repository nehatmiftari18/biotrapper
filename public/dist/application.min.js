"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["angular-loading-bar","ngResource","ngAnimate","ui.router","ui.bootstrap","ui.utils","smart-table","ngTagsInput","toggle-switch","angularjs-dropdown-multiselect","ngFileUpload","bootstrapLightbox","flow","ngVis"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider","flowFactoryProvider","cfpLoadingBarProvider",function($locationProvider,flowFactoryProvider,cfpLoadingBarProvider){$locationProvider.hashPrefix("!"),flowFactoryProvider.defaults={target:function(FlowFile,FlowChunk,isTest){return"inspections/savePicture"},testChunks:!1,permanentErrors:[404,500,501],maxChunkRetries:1,chunkRetryInterval:5e3,simultaneousUploads:4,chunkSize:1073741824},cfpLoadingBarProvider.includeSpinner=!0}]).filter("matchInactivateStatus",function(){return function(items,inactivateStatus){var filtered=[];return inactivateStatus?angular.forEach(items,function(item){item.status&&filtered.push(item)}):filtered=items,filtered}}),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),"#"===window.location.href[window.location.href.length-1]&&window.location.href.length-window.location.origin.length===2&&(window.location.href=window.location.origin+"/#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("checklists"),ApplicationConfiguration.registerModule("companies"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("frequencies"),ApplicationConfiguration.registerModule("inspection"),ApplicationConfiguration.registerModule("questions"),ApplicationConfiguration.registerModule("regulatories"),ApplicationConfiguration.registerModule("reports"),ApplicationConfiguration.registerModule("sites"),ApplicationConfiguration.registerModule("users"),angular.module("checklists").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Checklists","checklists","item",null,null,["superadmin","administrator"],2)}]),angular.module("checklists").config(["$stateProvider",function($stateProvider){$stateProvider.state("checklists",{url:"/checklists",templateUrl:"modules/checklists/views/checklists.client.view.html"}).state("checklist_create",{url:"/checklists/new",templateUrl:"modules/checklists/views/build-checklist.client.view.html"}).state("checklist_detail",{url:"/checklists/:checklistId/edit",templateUrl:"modules/checklists/views/build-checklist.client.view.html"})}]),angular.module("checklists").controller("ChecklistBuildController",["$scope","$stateParams","$location","Authentication","Checklists","$modal","Companies","Questions","Sites","Frequencies","SitesByCompany","FrequenciesByCompany","Regulatories","RegulatoriesByCompany","UserRole","InspectorsByCompany","SupervisorsByCompany","$anchorScroll",function($scope,$stateParams,$location,Authentication,Checklists,$modal,Companies,Questions,Sites,Frequencies,SitesByCompany,FrequenciesByCompany,Regulatories,RegulatoriesByCompany,UserRole,InspectorsByCompany,SupervisorsByCompany,$anchorScroll){$scope.initialize=function(){$scope.userRoles=["superadmin","administrator"],$scope.authentication=Authentication,$scope.userRoles.indexOf(Authentication.user.role)<0&&$location.path("/"),$scope.isSuperAdmin=Authentication.user.role===UserRole.Superadmin,$scope.typeString={none:"none","Yes/No":"Yes/No toggle","Yes/No/NA":"Yes/No/NA toggle",Numeric:"Numerical entry",Single:"Single select",Date:"Date picker",Text:"Text entry"},$scope.data={},$scope.orderReverse=!0,$scope.orderCriterion="updated",$scope.removedQuestions=[],$scope.relatedQuestions=[],$scope.filteredQuestions=[],$scope.notifiers_list=[],$scope.companies=Companies.query(),$scope.reminders=[{number:"",durationType:null,beforeAfterOn:null,hasCustomText:!1,customText:"",notifiers:[]},{number:"",durationType:null,beforeAfterOn:null,hasCustomText:!1,customText:"",notifiers:[]},{number:"",durationType:null,beforeAfterOn:null,hasCustomText:!1,customText:"",notifiers:[]}],$scope.is_primary_user="true",$scope.is_secondary_user="true",$scope.is_tertiary_user="true",$scope.multiselectSettings={showCheckAll:!1,showUncheckAll:!1,displayProp:"displayName",idProp:"_id",smartButtonMaxItems:100,smartButtonTextConverter:function(itemText,originalItem){return itemText}},$scope.showSearch=!1,$scope.filterCondition={},$scope.values={},$stateParams.checklistId?$scope.findOne($stateParams.checklistId):($scope.checklist=new Checklists({updated:moment()}),$scope.isSuperAdmin||($scope.checklist.company=Authentication.user.company,$scope.filterCondition.filter_company={_id:Authentication.user.company}),$scope.selectedCompany=Authentication.user.company,$scope.breadcrumbLabel="New Checklist",$scope.find())},$scope.find=function(){$scope.questions=Questions.query(),"none"===$scope.selectedCompany?($scope.frequencies=[],$scope.sites=[],$scope.inspectors=[],$scope.supervisors=[]):($scope.inspectors=InspectorsByCompany.query({companyId:$scope.selectedCompany}),$scope.supervisors=SupervisorsByCompany.query({companyId:$scope.selectedCompany}),$scope.frequencies=FrequenciesByCompany.query({companyId:$scope.selectedCompany}),$scope.sites=SitesByCompany.query({companyId:$scope.selectedCompany}),$scope.sites.$promise.then(function(res){$scope.resetChecklist()},function(err){$scope.resetChecklist()})),$scope.questions.$promise.then(function(result){$scope.getKeywords(),$scope.resetQuestions(),$scope.filterQuestionsByCompany()})},$scope.validateEmail=function(email){var re=/^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;return re.test(email)},$scope.updateNotifierList=function(){if($scope.notifiers_list=[],$scope.primary_inspector){var tmp=$scope.notifiers_list.filter(function(item){return item._id==$scope.primary_inspector._id});0==tmp.length&&$scope.notifiers_list.push($scope.primary_inspector)}if($scope.secondary_inspector){var tmp=$scope.notifiers_list.filter(function(item){return item._id==$scope.secondary_inspector._id});0==tmp.length&&$scope.notifiers_list.push($scope.secondary_inspector)}if($scope.tertiary_inspector){var tmp=$scope.notifiers_list.filter(function(item){return item._id==$scope.tertiary_inspector._id});0==tmp.length&&$scope.notifiers_list.push($scope.tertiary_inspector)}if("true"==$scope.is_primary_user&&$scope.primary_supervisor){var tmp=$scope.notifiers_list.filter(function(item){return item._id==$scope.primary_supervisor._id});0==tmp.length&&$scope.notifiers_list.push($scope.primary_supervisor)}if("true"==$scope.is_secondary_user&&$scope.secondary_supervisor){var tmp=$scope.notifiers_list.filter(function(item){return item._id==$scope.secondary_supervisor._id});0==tmp.length&&$scope.notifiers_list.push($scope.secondary_supervisor)}if("true"==$scope.is_tertiary_user&&$scope.tertiary_supervisor){var tmp=$scope.notifiers_list.filter(function(item){return item._id==$scope.tertiary_supervisor._id});0==tmp.length&&$scope.notifiers_list.push($scope.tertiary_supervisor)}if("false"==$scope.is_primary_user&&""!==$scope.primary_supervisor_email)if($scope.validateEmail($scope.primary_supervisor_email)){var tmp=$scope.notifiers_list.filter(function(item){return item._id==$scope.primary_supervisor_email});0==tmp.length&&$scope.notifiers_list.push({_id:$scope.primary_supervisor_email,displayName:$scope.primary_supervisor_email,emailAddr:!0})}else $scope.primary_supervisor_email="";if("false"==$scope.is_secondary_user&&""!==$scope.secondary_supervisor_email)if($scope.validateEmail($scope.secondary_supervisor_email)){var tmp=$scope.notifiers_list.filter(function(item){return item._id==$scope.secondary_supervisor_email});0==tmp.length&&$scope.notifiers_list.push({_id:$scope.secondary_supervisor_email,displayName:$scope.secondary_supervisor_email,emailAddr:!0})}else $scope.secondary_supervisor_email="";if("false"==$scope.is_tertiary_user&&""!==$scope.tertiary_supervisor_email)if($scope.validateEmail($scope.tertiary_supervisor_email)){var tmp=$scope.notifiers_list.filter(function(item){return item._id==$scope.tertiary_supervisor_email});0==tmp.length&&$scope.notifiers_list.push({_id:$scope.tertiary_supervisor_email,displayName:$scope.tertiary_supervisor_email,emailAddr:!0})}else $scope.tertiary_supervisor_email=""},$scope.customizeReminderText=function(reminder){reminder.hasCustomText=!reminder.hasCustomText,"On"==reminder.beforeAfterOn&&(reminder.customText="This inspection is due today. ([Due Date]) Please make sure you plan accordingly."),"Before"==reminder.beforeAfterOn&&(reminder.customText="This inspection is due in "+reminder.number+" "+reminder.durationType+" . ([Due Date]) Please make sure you plan accordingly."),"After"==reminder.beforeAfterOn&&(reminder.customText="This inspection was due "+reminder.number+" "+reminder.durationType+" ago. ([Due Date])")},$scope.updateReminderState=function(reminder){"On"==reminder.beforeAfterOn&&(reminder.number="",reminder.durationType="",reminder.customText="This inspection is due today. ([Due Date]) Please make sure you plan accordingly."),"Before"==reminder.beforeAfterOn&&(reminder.customText="This inspection is due in "+reminder.number+" "+reminder.durationType+" . ([Due Date]) Please make sure you plan accordingly."),"After"==reminder.beforeAfterOn&&(reminder.customText="This inspection was due "+reminder.number+" "+reminder.durationType+" ago. ([Due Date])")},$scope.getKeywords=function(){$scope.keywords=[];for(var i=0;i<$scope.questions.length;i++)for(var keywords=$scope.questions[i].keywords,j=0;j<keywords.length;j++)$scope.keywords.indexOf(keywords[j])<0&&keywords[j]&&$scope.keywords.push(keywords[j]);for($scope.returnKeywords=[],i=0;i<$scope.keywords.length;i++)$scope.returnKeywords.push({text:$scope.keywords[i]})},$scope.findOne=function(id){$scope.checklist=Checklists.get({checklistId:$stateParams.checklistId}),$scope.checklist.$promise.then(function(response){"administrator"===$scope.authentication.user.role&&$scope.checklist.company._id!==$scope.authentication.user.company&&$location.path("/"),$scope.selectedCompany=$scope.checklist.company._id,$scope.filterCondition.filter_company=$scope.checklist.company,$scope.breadcrumbLabel="Checklist Details ["+$scope.checklist.name+"]",$scope.find()})},$scope.toggleSearch=function(){$scope.showSearch=!$scope.showSearch,$scope.filterQuestions(),$scope.showSearch?$location.hash("bottom"):$location.hash(""),$anchorScroll()},$scope.openQuestion=function(question){$location.path("/questions/"+question._id+"/edit")},$scope.filterByCompany=function(){$scope.site=null,$scope.frequency=null,$scope.filterCondition.filter_company=$scope.data.company,$scope.data.company?($scope.isSuperAdmin?$scope.selectedCompany=$scope.data.company._id:$scope.selectedCompany=$scope.data.company,$scope.frequencies=FrequenciesByCompany.query({companyId:$scope.selectedCompany}),$scope.sites=SitesByCompany.query({companyId:$scope.selectedCompany}),$scope.inspectors=InspectorsByCompany.query({companyId:$scope.selectedCompany}),$scope.supervisors=SupervisorsByCompany.query({companyId:$scope.selectedCompany})):($scope.selectedCompany="none",$scope.sites=[],$scope.frequencies=[],$scope.inspectors=[],$scope.supervisors=[]),$scope.filterQuestions()},$scope.getFilterKeywords=function(){var filterCompanyId=null;$scope.isSuperAdmin?$scope.filterCondition.filter_company&&(filterCompanyId=$scope.filterCondition.filter_company._id):filterCompanyId=$scope.selectedCompany,$scope.filterKeywords=[];for(var i=0;i<$scope.questions.length;i++)if(!filterCompanyId||$scope.questions[i].company._id==filterCompanyId)for(var keywords=$scope.questions[i].keywords,j=0;j<keywords.length;j++)$scope.filterKeywords.indexOf(keywords[j])<0&&keywords[j]&&$scope.filterKeywords.push(keywords[j])},$scope.filterQuestionsByCompany=function(){$scope.filterCondition.filter_regulatory=null,$scope.isSuperAdmin?$scope.filterCondition.filter_company?$scope.regulatories=RegulatoriesByCompany.query({companyId:$scope.filterCondition.filter_company._id}):$scope.regulatories=Regulatories.query():$scope.regulatories=RegulatoriesByCompany.query({companyId:$scope.selectedCompany}),$scope.getFilterKeywords()},$scope.filterQuestionsByText=function(event){13==event.keyCode&&$scope.filterQuestions()},$scope.filterQuestions=function(){$scope.filteredQuestions=[];for(var i=0;i<$scope.questions.length;i++)(!$scope.filterCondition.filter_title||$scope.questions[i].text.toLowerCase().indexOf($scope.filterCondition.filter_title.toLowerCase())>-1)&&(void 0!==$scope.filterCondition.filter_company&&$scope.filterCondition.filter_company&&$scope.questions[i].company._id!==$scope.filterCondition.filter_company._id||(console.log($scope.filterCondition.filter_keyword),(void 0===$scope.filterCondition.filter_keyword||!$scope.filterCondition.filter_keyword||$scope.questions[i].keywords.indexOf($scope.filterCondition.filter_keyword)>=0)&&(void 0===$scope.filterCondition.filter_regulatory||!$scope.filterCondition.filter_regulatory||$scope.questions[i].regulatory_framework&&$scope.questions[i].regulatory_framework._id===$scope.filterCondition.filter_regulatory._id)&&($scope.isQuestionAdded($scope.questions[i]._id)||$scope.filteredQuestions.push($scope.questions[i]))))},$scope.getChecklistString=function(question){for(var checklist=[],i=0;i<question.checklists.length-1;i++)checklist.indexOf(question.checklists[i].name)<0&&checklist.push(question.checklists[i].name);return checklist.join()},$scope.isQuestionAdded=function(questionId){for(var i=0;i<$scope.relatedQuestions.length;i++)if($scope.relatedQuestions[i].question&&$scope.relatedQuestions[i].question._id===questionId)return!0;return!1},$scope.sortBy=function(criterion){$scope.orderCriterion===criterion?$scope.orderReverse=!$scope.orderReverse:("updated"===criterion?$scope.orderReverse=!0:$scope.orderReverse=!1,$scope.orderCriterion=criterion)},$scope.generateDate=function(dateStr){return moment(dateStr).format("MM/DD/YYYY HH:mm")},$scope.isFormValid=function(){return $scope.isSuperAdmin&&!$scope.data.company?($scope.error="Please select company.",!1):!$scope.values.checklistText||$scope.values.checklistText.length<1?($scope.error="Please type in the checklist text.",!1):$scope.site?$scope.frequency?($scope.error=null,!0):($scope.error="Please select required frequency.",!1):($scope.error="Please select site.",!1)},$scope.orderQuestions=function(index){var newIndex=Number($scope.relatedQuestions[index].order)-1,temp=$scope.relatedQuestions[index];if(index>newIndex)for(var i=index;i>newIndex;i--)$scope.relatedQuestions[i-1].order=Number($scope.relatedQuestions[i-1].order)+1,$scope.relatedQuestions[i]=$scope.relatedQuestions[i-1];else for(var j=index;j<newIndex;j++)$scope.relatedQuestions[j+1].order=Number($scope.relatedQuestions[j+1].order)-1,$scope.relatedQuestions[j]=$scope.relatedQuestions[j+1];$scope.relatedQuestions[newIndex]=temp,console.log($scope.relatedQuestions)},$scope.addQuestions=function(){for(var i=0;i<$scope.filteredQuestions.length;i++)if($scope.filteredQuestions[i].isChecked){$scope.filteredQuestions[i].regulatory_framework=[].concat($scope.filteredQuestions[i].regulatory_framework||[]);var newQuestion={order:$scope.relatedQuestions.length+1,mandatory:"yes",question:$scope.filteredQuestions[i]};$scope.relatedQuestions.push(newQuestion)}$scope.showSearch=!1,$scope.filteredQuestions=[]},$scope.removeQuestion=function(index){var modalInstance=$modal.open({templateUrl:"modules/checklists/views/modal.delete.question.html",controller:"ModalController",resolve:{}});modalInstance.result.then(function(modalResult){$scope.removedQuestions.push($scope.relatedQuestions[index]),$scope.relatedQuestions.splice(index,1),angular.forEach($scope.relatedQuestions,function(item,i){item.order=i+1}),$scope.showSearch&&$scope.filterQuestions()},function(){console.log("Modal dismissed at: "+new Date)})},$scope.cancelSearch=function(){$scope.filteredQuestions=[],$scope.showSearch=!1},$scope.saveChecklist=function(){if($scope.isFormValid()){$scope.checklist.updated=$scope.lastUpdated=moment(),$scope.isSuperAdmin&&($scope.checklist.company=$scope.data.company._id),$scope.checklist.name=$scope.values.checklistText,$scope.checklist.citation=$scope.values.citation,$scope.checklist.note=$scope.values.note;for(var keywords=[],i=0;i<$scope.values.keywords.length;i++)keywords.push($scope.values.keywords[i].text);$scope.checklist.keywords=keywords,$scope.checklist.site=$scope.site._id,$scope.checklist.frequency=$scope.frequency._id,$scope.checklist.editor=$scope.authentication.user._id,$scope.checklist.primary_inspector=$scope.primary_inspector?$scope.primary_inspector._id:null,$scope.checklist.secondary_inspector=$scope.secondary_inspector?$scope.secondary_inspector._id:null,$scope.checklist.tertiary_inspector=$scope.tertiary_inspector?$scope.tertiary_inspector._id:null,$scope.checklist.primary_supervisor=null,"true"==$scope.is_primary_user?($scope.checklist.primary_supervisor=$scope.primary_supervisor?$scope.primary_supervisor._id:null,$scope.checklist.primary_supervisor_email=""):$scope.checklist.primary_supervisor_email=$scope.primary_supervisor_email,$scope.checklist.secondary_supervisor=null,"true"==$scope.is_secondary_user?($scope.checklist.secondary_supervisor=$scope.secondary_supervisor?$scope.secondary_supervisor._id:null,$scope.checklist.secondary_supervisor_email=""):$scope.checklist.secondary_supervisor_email=$scope.secondary_supervisor_email,$scope.checklist.tertiary_supervisor=null,"true"==$scope.is_tertiary_user?($scope.checklist.tertiary_supervisor=$scope.tertiary_supervisor?$scope.tertiary_supervisor._id:null,$scope.checklist.tertiary_supervisor_email=""):$scope.checklist.tertiary_supervisor_email=$scope.tertiary_supervisor_email,angular.forEach($scope.reminders,function(reminder){reminder.hasCustomText||("On"==reminder.beforeAfterOn&&(reminder.customText="This inspection is due today. ([Due Date]) Please make sure you plan accordingly."),"Before"==reminder.beforeAfterOn&&(reminder.customText="This inspection is due in "+reminder.number+" "+reminder.durationType+" . ([Due Date]) Please make sure you plan accordingly."),"After"==reminder.beforeAfterOn&&(reminder.customText="This inspection was due "+reminder.number+" "+reminder.durationType+" ago. ([Due Date])"))}),$scope.checklist.reminders=$scope.reminders,$scope.saveQuestions(),$scope.checklist._id?$scope.checklist.$update(function(){$location.path("checklists")},function(errorResponse){errorResponse.data&&($scope.error=errorResponse.data.message)}):$scope.checklist.$save(function(){console.log("saved: ",$scope.checklist),$location.path("checklists")},function(errorResponse){errorResponse.data&&($scope.error=errorResponse.data.message)})}},$scope.resetChecklist=function(){if($scope.data.company=$scope.checklist.company,$scope.values.checklistText=$scope.checklist.name||"",$scope.values.citation=$scope.checklist.citation||"",$scope.values.keywords=[],$scope.checklist.keywords)for(var i=0;i<$scope.checklist.keywords.length;i++)$scope.values.keywords.push({text:$scope.checklist.keywords[i]});$scope.values.note=$scope.checklist.note||"",$scope.site=$scope.checklist.site,$scope.frequency=$scope.checklist.frequency,$scope.primary_inspector=$scope.checklist.primary_inspector,$scope.secondary_inspector=$scope.checklist.secondary_inspector,$scope.tertiary_inspector=$scope.checklist.tertiary_inspector,$scope.primary_supervisor=$scope.checklist.primary_supervisor,$scope.secondary_supervisor=$scope.checklist.secondary_supervisor,$scope.tertiary_supervisor=$scope.checklist.tertiary_supervisor,$scope.primary_supervisor_email=$scope.checklist.primary_supervisor_email,$scope.secondary_supervisor_email=$scope.checklist.secondary_supervisor_email,$scope.tertiary_supervisor_email=$scope.checklist.tertiary_supervisor_email,$scope.primary_supervisor_email&&""!=$scope.primary_supervisor_email?$scope.is_primary_user="false":$scope.is_primary_user="true",$scope.secondary_supervisor_email&&""!=$scope.secondary_supervisor_email?$scope.is_secondary_user="false":$scope.is_secondary_user="true",$scope.tertiary_supervisor_email&&""!=$scope.tertiary_supervisor_email?$scope.is_tertiary_user="false":$scope.is_tertiary_user="true",$scope.checklist.editor?$scope.editor=" by ["+$scope.checklist.editor.username+"]":$scope.editor="",$scope.updateNotifierList(),$scope.checklist.reminders&&3==$scope.checklist.reminders.length&&($scope.reminders=$scope.checklist.reminders),$scope.lastUpdated=moment($scope.checklist.updated).tz("America/New_York"),$scope.resetQuestions()},$scope.saveQuestions=function(){$scope.checklist.questions=[];for(var i=0;i<$scope.relatedQuestions.length;i++){var newQuestion={order:$scope.relatedQuestions[i].order,mandatory:"yes"===$scope.relatedQuestions[i].mandatory,question:$scope.relatedQuestions[i].question._id};!function(j){var q=Questions.get({questionId:$scope.relatedQuestions[j].question._id});q.$promise.then(function(fetchedQuery){fetchedQuery.checklists||(fetchedQuery.checklists=[]),q.checklists.push($scope.checklist._id),q.$update(function(response){},function(errorResponse){console.log("update error: ",j,errorResponse)})},function(error){console.log("get error: ",j,error)})}(i),$scope.checklist.questions.push(newQuestion)}for(i=0;i<$scope.removedQuestions.length;i++)!function(j){var q=Questions.get({questionId:$scope.removedQuestions[j].question._id});q.$promise.then(function(fetchedQuery){var tmp=q.checklists;q.checklists=[],_.each(tmp,function(item){item._id!==$scope.checklist._id&&q.checklists.push(item)}),q.$update(function(response){},function(errorResponse){console.log("update error: ",j,errorResponse)})},function(error){console.log("get error: ",j,error)})}(i)},$scope.resetQuestions=function(){if($scope.relatedQuestions=[],$scope.checklist.questions)for(var i=0;i<$scope.checklist.questions.length;i++)if($scope.checklist.questions[i].question){$scope.checklist.questions[i].question.regulatory_framework=[].concat($scope.checklist.questions[i].question.regulatory_framework||[]);var newQuestion={order:$scope.checklist.questions[i].order,mandatory:$scope.checklist.questions[i].mandatory?"yes":"no",question:$scope.checklist.questions[i].question};$scope.relatedQuestions.push(newQuestion)}},$scope.getRegulatoryFrameworkString=function(regulatory_framework){for(var str_list=[],i=0;i<regulatory_framework.length;i++)str_list.indexOf(regulatory_framework[i].name)<0&&str_list.push(regulatory_framework[i].name);return str_list.join()},$scope.selectAllQuestions=function(checkAllQuestions){for(var i=0;i<$scope.filteredQuestions.length;i++)$scope.filteredQuestions[i].isChecked=checkAllQuestions},$scope.loadKeywordsTags=function(query){return $scope.returnKeywords.filter(function(obj){return obj.text.toLowerCase().indexOf(query.toLowerCase())>-1})},$scope.cancel=function(){$location.path("checklists")}}]),angular.module("checklists").controller("ChecklistsController",["$scope","$rootScope","$stateParams","$location","Authentication","Checklists","Companies","Sites","$modal","ChecklistsByCompany","SitesByCompany","UserRole",function($scope,$rootScope,$stateParams,$location,Authentication,Checklists,Companies,Sites,$modal,ChecklistsByCompany,SitesByCompany,UserRole){$scope.initScope=function(){$scope.userRoles=["superadmin","administrator"],$scope.authentication=Authentication,$scope.userRoles.indexOf(Authentication.user.role)<0&&$location.path("/"),$scope.isSuperAdmin=Authentication.user.role===UserRole.Superadmin,$scope.data={},$scope.data.filter_company=$rootScope.checklist_filter_company||"",$rootScope.checklist_filter_company="",$scope.typeString={none:"none","Yes/No":"Yes/No toggle","Yes/No/NA":"Yes/No/NA toggle",Numeric:"Numerical entry",Single:"Single select",Date:"Date picker",Text:"Text entry"},$scope.orderReverse=$rootScope.checklist_orderReverse||!0,$rootScope.checklist_orderReverse="",$scope.orderCriterion=$rootScope.checklist_orderCriterion||"updated",$rootScope.checklist_orderCriterion="";var defaultCompany="all";Authentication.user.role===UserRole.Administrator&&(defaultCompany=Authentication.user.company),$scope.selectedCompany=$rootScope.checklist_selectedCompany||defaultCompany,$rootScope.checklist_selectedCompany="",$scope.find()},$scope.create=function(){$location.path("/checklists/new")},$scope.find=function(){$scope.companies=Companies.query(),"all"===$scope.selectedCompany?($scope.checklists=Checklists.query(),$scope.sites=Sites.query()):($scope.checklists=ChecklistsByCompany.query({companyId:$scope.selectedCompany}),$scope.sites=SitesByCompany.query({companyId:$scope.selectedCompany})),$scope.checklists.$promise.then(function(result){$scope.getKeywords(),$scope.filterChecklists()}),$scope.sites.$promise.then(function(result){$scope.filter_site=$rootScope.checklist_filter_site||"",$rootScope.checklist_filter_site="",$scope.filterChecklists()})},$scope.findOne=function(){$scope.checklist=Checklists.get({checklistId:$stateParams.checklistId})},$scope.getKeywords=function(){$scope.keywords=[];for(var i=0;i<$scope.checklists.length;i++)for(var keywords=$scope.checklists[i].keywords,j=0;j<keywords.length;j++)$scope.keywords.indexOf(keywords[j])<0&&keywords[j]&&$scope.keywords.push(keywords[j]);$scope.filter_keyword=$rootScope.checklist_filter_keyword||"",$rootScope.checklist_filter_keyword=""},$scope.openChecklist=function(checklist){$rootScope.checklist_filter_company=$scope.data.filter_company,$rootScope.checklist_filter_keyword=$scope.filter_keyword,$rootScope.checklist_filter_site=$scope.filter_site,$rootScope.checklist_orderReverse=$scope.orderReverse,$rootScope.checklist_orderCriterion=$scope.orderCriterion,$rootScope.checklist_selectedCompany=$scope.selectedCompany,$location.path("/checklists/"+checklist._id+"/edit")},$scope.copyChecklist=function(originalChecklist){var checklist=new Checklists;checklist.name="Copy of "+originalChecklist.name,checklist.company=originalChecklist.company?originalChecklist.company._id:null,checklist.citation=originalChecklist.citation,checklist.site=originalChecklist.site?originalChecklist.site._id:null,checklist.frequency=originalChecklist.frequency?originalChecklist.frequency._id:null,checklist.keywords=angular.copy(originalChecklist.keywords),checklist.note=originalChecklist.note,checklist.questions=angular.copy(originalChecklist.questions),checklist.primary_inspector=originalChecklist.primary_inspector,checklist.secondary_inspector=originalChecklist.secondary_inspector,checklist.tertiary_inspector=originalChecklist.tertiary_inspector,checklist.primary_supervisor=originalChecklist.primary_supervisor,checklist.primary_supervisor_email=originalChecklist.primary_supervisor_email,checklist.secondary_supervisor=originalChecklist.secondary_supervisor,checklist.secondary_supervisor_email=originalChecklist.secondary_supervisor_email,checklist.tertiary_supervisor=originalChecklist.tertiary_supervisor,checklist.tertiary_supervisor_email=originalChecklist.tertiary_supervisor_email,checklist.reminders=originalChecklist.reminders,console.log(checklist.questions);for(var j=0;j<checklist.questions.length;j++)checklist.questions[j].question&&(checklist.questions[j].question=checklist.questions[j].question._id);checklist.updated=moment(),console.log("checklist: ",checklist),checklist.$save(function(){checklist.company=originalChecklist.company,checklist.site=originalChecklist.site,checklist.frequency=originalChecklist.frequency,checklist.questions=angular.copy(originalChecklist.questions),$scope.checklists.push(checklist),$scope.filterChecklists()},function(error){console.log(error)})},$scope.picture={},$scope.copyChecklists=function(){for(var selectedCheckLists=[],i=0;i<$scope.checklists.length;i++)$scope.checklists[i].isChecked&&selectedCheckLists.push($scope.checklists[i]);if(0!==selectedCheckLists.length){var modalInstance=$modal.open({controller:"CopyChecklistModalController",templateUrl:"modules/checklists/views/modal.copy.checklist.html",resolve:{checklists:function(){return selectedCheckLists}}});modalInstance.result.then(function(modalResult){for(var i=0;i<$scope.checklists.length;i++)$scope.checklists[i].isChecked&&($scope.copyChecklist($scope.checklists[i]),$scope.checklists[i].isChecked=!1)},function(){console.log("Modal dismissed at: "+new Date)})}},$scope.deleteChecklists=function(){for(var selectedCheckLists=[],i=0;i<$scope.checklists.length;i++)$scope.checklists[i].isChecked&&selectedCheckLists.push($scope.checklists[i]);if(0!==selectedCheckLists.length){var modalInstance=$modal.open({controller:"ChecklistDelModalCtrl",templateUrl:"modules/checklists/views/modal.delete.checklist.html",resolve:{checklists:function(){return selectedCheckLists}}});modalInstance.result.then(function(modalResult){for(var i=$scope.checklists.length;i--;)$scope.checklists[i].isChecked&&(Checklists.delete({checklistId:$scope.checklists[i]._id}),$scope.checklists.splice(i,1));$scope.filterChecklists(),console.log("after deletion: ",$scope.checklists)},function(){console.log("Modal dismissed at: "+new Date)})}},$scope.generateDate=function(dateStr){return moment(dateStr).tz("America/New_York").format("MM/DD/YYYY HH:mm a")},$scope.filterByCompany=function(){$scope.data.filter_company?$scope.selectedCompany=$scope.data.filter_company._id:$scope.selectedCompany="all",$scope.find()},$scope.filterChecklists=function(){$scope.filteredChecklists=[];for(var i=0;i<$scope.checklists.length;i++)(void 0===$scope.filter_keyword||!$scope.filter_keyword||$scope.checklists[i].keywords.indexOf($scope.filter_keyword)>=0)&&(void 0!==$scope.filter_site&&$scope.filter_site&&$scope.checklists[i].site._id!==$scope.filter_site._id||$scope.filteredChecklists.push($scope.checklists[i]))},$scope.sortBy=function(criterion){$scope.orderCriterion===criterion?$scope.orderReverse=!$scope.orderReverse:("updated"===criterion?$scope.orderReverse=!0:$scope.orderReverse=!1,$scope.orderCriterion=criterion)}}]),angular.module("checklists").controller("ChecklistDelModalCtrl",["$scope","$modalInstance","checklists",function($scope,$modalInstance,checklists){$scope.checklists=checklists,$scope.ok=function(){$modalInstance.close("ok")},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]).controller("CopyChecklistModalController",["$scope","$modalInstance","checklists",function($scope,$modalInstance,checklists){$scope.checklists=checklists,$scope.ok=function(){$modalInstance.close("ok")},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]),angular.module("checklists").directive("numbersOnly",function(){return{require:"ngModel",link:function(scope,element,attr,ngModelCtrl){function fromUser(text){if(text){var transformedInput=text.replace(/[^0-9]/g,"");return transformedInput!==text&&(ngModelCtrl.$setViewValue(transformedInput),ngModelCtrl.$render()),transformedInput}}ngModelCtrl.$parsers.push(fromUser)}}}),angular.module("checklists").factory("Checklists",["$resource",function($resource){return $resource("checklists/:checklistId",{checklistId:"@_id"},{update:{method:"PUT"}})}]).factory("ChecklistsByCompany",["$resource",function($resource){return $resource("checklists/company/:companyId",{companyId:"@companyId"})}]),angular.module("companies").config(["$stateProvider",function($stateProvider){$stateProvider.state("company-list",{url:"/companies",templateUrl:"modules/companies/views/company-admin.client.view.html"}).state("company-create",{url:"/companies/new",templateUrl:"modules/companies/views/create-company.client.view.html"
}).state("company-detail",{url:"/companies/:companyId/edit",templateUrl:"modules/companies/views/create-company.client.view.html"})}]),angular.module("companies").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Administration","admin","dropdown",null,null,["superadmin","administrator"],4),Menus.addSubMenuItem("topbar","admin","Companies","companies",null,!0,["superadmin"],1)}]),angular.module("companies").controller("CompaniesController",["$scope","$http","$stateParams","$location","Authentication","Companies","PersistSortService",function($scope,$http,$stateParams,$location,Authentication,Companies,PersistSortService){$scope.userRoles=["superadmin"],$scope.authentication=Authentication,$scope.admin="Companies",$scope.isHideInactivate=!0,$scope.lastUpdated=moment().tz("America/New_York"),$scope.sortColumn={name:!0,status:!1},$scope.persistSort=function(item){1==$scope.sortColumn[item]?($scope.sortColumn={name:!1,status:!1},$scope.sortColumn[item]="reverse"):0==$scope.sortColumn[item]?($scope.sortColumn={name:!1,status:!1},$scope.sortColumn[item]=!0):"reverse"==$scope.sortColumn[item]&&($scope.sortColumn={name:!1,status:!1},$scope.sortColumn[item]=!1),PersistSortService.set("company_sort",$scope.sortColumn)},$scope.addNew=function(){$location.path("companies/new")},$scope.editCompany=function(company){$location.path("companies/"+company._id+"/edit")},$scope.find=function(){PersistSortService.get("company_sort")&&($scope.sortColumn=PersistSortService.get("company_sort")),$scope.userRoles.indexOf(Authentication.user.role)<0&&$location.path("/"),$http.get("/companies/all").success(function(response){$scope.companies=$scope.safeCompanies=response}).error(function(response){console.log("error: ",response)})},$scope.findOne=function(){$scope.company=Companies.get({companyId:$stateParams.companyId})},$scope.adminChanged=function(){"Users"===$scope.admin?$location.path("users"):"Sites"===$scope.admin?$location.path("sites"):"Regulatory"===$scope.admin?$location.path("regulatories"):"Frequencies"===$scope.admin&&$location.path("frequencies")},$scope.sortByStatus=function(row){return!row.status}}]),angular.module("companies").controller("CompanyCreateController",["$scope","$stateParams","$location","Authentication","Companies","CompanySrv",function($scope,$stateParams,$location,Authentication,Companies,CompanySrv){$scope.initialize=function(){$scope.userRoles=["superadmin"],$scope.authentication=Authentication,$scope.userRoles.indexOf(Authentication.user.role)<0&&$location.path("/"),$stateParams.companyId?$scope.findOne($stateParams.companyId):($scope.breadcrumbLabel="New Company",$scope.company=new Companies({name:"",status:!0}),$scope.reset())},$scope.findOne=function(id){$scope.company=Companies.get({companyId:id}),$scope.company.$promise.then(function(response){$scope.breadcrumbLabel="Company Details ["+$scope.company.name+"]",$scope.reset()})},$scope.save=function(){$scope.company.name=$scope.companyName,$scope.company.status="true"===$scope.status,$scope.company.updated=$scope.lastUpdated=moment(),$scope.company.editor=$scope.authentication.user._id,$scope.company._id?$scope.company.$update(function(response){$location.path("companies")}):$scope.company.$save(function(response){$location.path("companies")})},$scope.reset=function(){$scope.companyName=$scope.company.name,$scope.status=$scope.company.status?"true":"false",$scope.lastUpdated=moment($scope.company.updated).tz("America/New_York"),$scope.company.editor?$scope.editor=" by ["+$scope.company.editor.username+"]":$scope.editor=""},$scope.cancel=function(){$location.path("companies")}}]),angular.module("companies").factory("Companies",["$resource",function($resource){return $resource("companies/:companyId",{companyId:"@_id"},{update:{method:"PUT"}})}]).service("CompanySrv",function(){this.company={}}),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]).run(function($rootScope,$location,Authentication){$rootScope.$on("$locationChangeStart",function(event,next,current){if(!Authentication.user){next.split("/").pop();next.endsWith("signin")||next.includes("password/forgot")||next.includes("password/reset")||$location.path("signin")}})}),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","$http","Authentication","$location","UserRole",function($scope,$http,Authentication,$location,UserRole){$scope.authentication=Authentication,$scope.users=[],$scope.authentication.user?Authentication.user.role===UserRole.Inspector?$location.path("inspection"):Authentication.user.role===UserRole.Supervisor?$location.path("reports"):Authentication.user.role===UserRole.Administrator?$location.path("users"):Authentication.user.role===UserRole.Superadmin&&$location.path("users"):$location.path("signin"),$scope.getUsers=function(){$scope.authentication.user&&$http.get("/users/all").success(function(response){console.log("success: ",response),$scope.users=response}).error(function(response){$scope.error=response.message,console.log("error: ",response)})},$scope.getUsers()}]),angular.module("core").directive("fileread",[function(){return{scope:{fileread:"="},link:function(scope,element,attributes){element.bind("change",function(changeEvent){scope.$apply(function(){scope.fileread=changeEvent.target.files[0]})})}}}]).directive("customOnChange",function(){return{restrict:"A",link:function(scope,element,attrs){var onChangeFunc=scope.$eval(attrs.customOnChange);element.bind("change",onChangeFunc)}}}).directive("bindFile",[function(){return{require:"ngModel",restrict:"A",link:function($scope,el,attrs,ngModel){el.bind("change",function(event){ngModel.$setViewValue(event.target.files[0]),$scope.$apply()}),$scope.$watch(function(){return ngModel.$viewValue},function(value){value||el.val("")})}}}]).directive("ngEnter",function(){return function(scope,element,attrs){element.bind("keydown keypress",function(event){13===event.which&&(scope.$apply(function(){scope.$eval(attrs.ngEnter,{event:event})}),event.preventDefault())})}}).directive("ngDropdownMultiselectDisabled",function(){return{restrict:"A",controller:["$scope","$element","$attrs",function($scope,$element,$attrs){var $btn;return $btn=$element.find("button"),$scope.$watch($attrs.ngDropdownMultiselectDisabled,function(newVal){return $btn.attr("disabled",newVal)})}]}}),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.role)return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]).factory("PersistSortService",function(){function set(property,data){savedData[property]=data}function get(property){return savedData[property]}function clear(property){savedData[property]={}}function clearAll(){savedData={}}var savedData={};return{set:set,get:get,clear:clear,clearAll:clearAll}}),angular.module("frequencies").run(["Menus",function(Menus){Menus.addSubMenuItem("topbar","admin","Frequencies","frequencies",null,!0,["superadmin","administrator"],4)}]),angular.module("frequencies").config(["$stateProvider",function($stateProvider){$stateProvider.state("frequency_list",{url:"/frequencies",templateUrl:"modules/frequency/views/list-frequencies.client.view.html"}).state("frequency_create",{url:"/frequencies/new",templateUrl:"modules/frequency/views/create-frequency.client.view.html"}).state("frequency_detail",{url:"/frequencies/:frequencyId/edit",templateUrl:"modules/frequency/views/create-frequency.client.view.html"})}]),angular.module("frequencies").controller("FrequencyCreateController",["$scope","$stateParams","$location","Authentication","Companies","Repeats","Frequencies","FrequencySrv","UserRole",function($scope,$stateParams,$location,Authentication,Companies,Repeats,Frequencies,FrequencySrv,UserRole){$scope.initialize=function(){$scope.userRoles=["superadmin","administrator"],$scope.authentication=Authentication,$scope.isSuperAdmin=Authentication.user.role===UserRole.Superadmin,$scope.userRoles.indexOf(Authentication.user.role)<0&&$location.path("/"),$scope.data={},$scope.companies=Companies.query(),$stateParams.frequencyId?$scope.findOne($stateParams.frequencyId):($scope.breadcrumbLabel="New Frequency",$scope.frequency=new Frequencies({name:"",period:"due",status:!0}),$scope.isSuperAdmin||($scope.frequency.company=Authentication.user.company),$scope.status="true"),$scope.selectedRepeat={},$scope.repeats=Repeats.query(),$scope.repeats.$promise.then(function(response){$stateParams.frequencyId||($scope.frequency.type=$scope.data.selectedRepeatName=response[0].name),$scope.updateSelectedRepeat()})},$scope.updateSelectedRepeat=function(){for(var monthDays=[],i=1;i<=31;i++)monthDays.push(i);for(var quarterDays=[],i=1;i<=90;i++)quarterDays.push(i);var times=["12 am","1 am","2 am","3 am","4 am","5 am","6 am","7 am","8 am","9 am","10 am","11 am","12 pm","1 pm","2 pm","3 pm","4 pm","5 pm","6 pm","7 pm","8 pm","9 pm","10 pm","11pm"];$scope.repeats.forEach(function(item){if(item.name===$scope.data.selectedRepeatName){$scope.selectedRepeat=item,$scope.selectedRepeat.rangeArray=[];for(var i=0;i<item.ranges;i++)$scope.selectedRepeat.rangeArray.push({number:i,rangeType:$scope.selectedRepeat.rangeType});"time"===$scope.selectedRepeat.rangeType?$scope.selectedRepeat.rangeFrom=$scope.selectedRepeat.rangeTo=times:"day of week"===$scope.selectedRepeat.rangeType?$scope.selectedRepeat.rangeFrom=$scope.selectedRepeat.rangeTo=moment.weekdays():"day of month"===$scope.selectedRepeat.rangeType?($scope.selectedRepeat.rangeFrom=$scope.selectedRepeat.rangeTo=monthDays,$scope.selectedRepeat.rangeLabel="Day"):"month and day"===$scope.selectedRepeat.rangeType&&($scope.selectedRepeat.rangeFrom=$scope.selectedRepeat.rangeTo=monthDays,$scope.selectedRepeat.rangeFrom2=$scope.selectedRepeat.rangeTo2=moment.months()),"time"===$scope.selectedRepeat.dueBy?($scope.selectedRepeat.dueLabel="At",$scope.selectedRepeat.due=times):"day of week"===$scope.selectedRepeat.dueBy?($scope.selectedRepeat.dueLabel="On",$scope.selectedRepeat.due=moment.weekdays()):"week of month and day of week"===$scope.selectedRepeat.dueBy?($scope.selectedRepeat.dueLabel="On the",$scope.selectedRepeat.dueWeek=["First","Second","Third","Fourth"],$scope.selectedRepeat.due=moment.weekdays()):"day of quarter"===$scope.selectedRepeat.dueBy?($scope.selectedRepeat.dueLabel="Before day",$scope.selectedRepeat.due=quarterDays):"day of year"===$scope.selectedRepeat.dueBy&&($scope.selectedRepeat.dueLabel="On",$scope.selectedRepeat.dueMonth=["January","February","March","April","May","June","July","August","September","October","November","December"],$scope.selectedRepeat.due=monthDays),$scope.data.interval=$scope.selectedRepeat.incrementDays,$scope.data.period=$scope.frequency.period||"due",$scope.data.due=$scope.frequency.due||{dueWeek:0,value:5}}})},$scope.findOne=function(id){$scope.frequency=Frequencies.get({frequencyId:id}),$scope.frequency.$promise.then(function(response){"administrator"===$scope.authentication.user.role&&($scope.frequency.company._id!==$scope.authentication.user.company&&$location.path("/"),$scope.frequency.company=$scope.frequency.company._id),$scope.breadcrumbLabel="Required Frequency Details ["+$scope.frequency.name+"]",$scope.reset()})},$scope.isFormValid=function(){return $scope.isSuperAdmin&&!$scope.data.company?$scope.error="Please select company.":$scope.frequencyName&&$scope.frequencyName.length?$scope.data.period?$scope.error=null:$scope.error="Please select frequency option.":$scope.error="Please fill in required frequency.",!$scope.error},$scope.save=function(){$scope.isFormValid()&&($scope.frequency.updated=$scope.lastUpdated=moment(),$scope.frequency.name=$scope.frequencyName,$scope.isSuperAdmin&&($scope.frequency.company=$scope.data.company._id),$scope.frequency.status="true"===$scope.status,$scope.frequency.editor=$scope.authentication.user._id,$scope.frequency.type=$scope.data.selectedRepeatName,$scope.frequency.period=$scope.data.period,$scope.frequency.between=$scope.data.between,$scope.frequency.due=$scope.data.due,$scope.frequency.interval=$scope.data.interval,$scope.frequency._id?$scope.frequency.$update(function(response){console.log("frequency: ",response),$location.path("frequencies")}):$scope.frequency.$save(function(response){console.log("frequency: ",response),$location.path("frequencies")}))},$scope.reset=function(){$scope.data.company=$scope.frequency.company,$scope.frequencyName=$scope.frequency.name,$scope.data.selectedRepeatName=$scope.frequency.type,$scope.data.period=$scope.frequency.period,$scope.data.between=$scope.frequency.between,$scope.data.due=$scope.frequency.due||{dueWeek:0,value:0},$scope.data.due.dueWeek=Number($scope.data.due.dueWeek),$scope.data.due.value=Number($scope.data.due.value),$scope.data.interval=$scope.frequency.interval,$scope.status=$scope.frequency.status?"true":"false",$scope.lastUpdated=moment($scope.frequency.updated).tz("America/New_York"),$scope.frequency.editor?$scope.editor=" by ["+$scope.frequency.editor.username+"]":$scope.editor="",$scope.updateSelectedRepeat()},$scope.cancel=function(){$location.path("frequencies")},$scope.removeRepeats=function(){Repeats.remove({},function(response){console.log(response)})}}]),angular.module("frequencies").controller("FrequenciesController",["$scope","$http","$stateParams","$location","Authentication","Companies","Frequencies","FrequencySrv","UserRole","FrequenciesByCompany","PersistSortService",function($scope,$http,$stateParams,$location,Authentication,Companies,Frequencies,FrequencySrv,UserRole,FrequenciesByCompany,PersistSortService){$scope.userRoles=["superadmin","administrator"],$scope.authentication=Authentication,$scope.isSuperAdmin=Authentication.user.role===UserRole.Superadmin,$scope.admin="Frequencies",$scope.isHideInactivate=!0,$scope.lastUpdated=moment().tz("America/New_York"),$scope.sortColumn={name:!0,company:!1,status:!1},$scope.persistSort=function(item){1==$scope.sortColumn[item]?($scope.sortColumn={name:!1,company:!1,status:!1},$scope.sortColumn[item]="reverse"):0==$scope.sortColumn[item]?($scope.sortColumn={name:!1,company:!1,status:!1},$scope.sortColumn[item]=!0):"reverse"==$scope.sortColumn[item]&&($scope.sortColumn={name:!1,company:!1,status:!1},$scope.sortColumn[item]=!1),PersistSortService.set("frequency_sort",$scope.sortColumn)},$scope.create=function(){$location.path("frequencies/new")},$scope.find=function(){PersistSortService.get("frequency_sort")&&($scope.sortColumn=PersistSortService.get("frequency_sort")),$scope.userRoles.indexOf(Authentication.user.role)<0&&$location.path("/"),$scope.isSuperAdmin?$scope.findAll():$scope.findByCompany()},$scope.findAll=function(){$http.get("/frequencies/all").success(function(response){$scope.frequencies=response,$scope.safeFrequencies=response}).error(function(response){$scope.error=response.message,console.log("error: ",response)})},$scope.findByCompany=function(){$scope.frequencies=$scope.safeFrequencies=FrequenciesByCompany.query({companyId:Authentication.user.company})},$scope.findOne=function(){$scope.frequency=Frequencies.get({frequencyId:$stateParams.frequencyId})},$scope.editFrequency=function(frequency){$location.path("frequencies/"+frequency._id+"/edit")},$scope.adminChanged=function(){"Users"===$scope.admin?$location.path("users"):"Companies"===$scope.admin?$location.path("companies"):"Regulatory"===$scope.admin?$location.path("regulatories"):"Sites"===$scope.admin&&$location.path("sites")},$scope.sortByStatus=function(row){return!row.status}}]),angular.module("frequencies").factory("Frequencies",["$resource",function($resource){return $resource("frequencies/:frequencyId",{frequencyId:"@_id"},{update:{method:"PUT"}})}]).factory("FrequenciesByCompany",["$resource",function($resource){return $resource("frequencies/company/:companyId",{companyId:"@companyId"})}]).factory("Repeats",["$resource",function($resource){return $resource("repeats")}]).service("FrequencySrv",function(){this.frequency={}}),angular.module("inspection").run(["Menus",function(Menus){Menus.addMenuItem("topbar","My Inspections","inspection","item",null,null,["inspector"])}]),angular.module("inspection").config(["$stateProvider",function($stateProvider){$stateProvider.state("inspectionHome",{url:"/inspection",templateUrl:"modules/inspection/views/inspection.client.view.html"}).state("inspectionQuestions",{url:"/inspection/checklists/:checklistId",templateUrl:"modules/inspection/views/inspection.checklist.client.view.html"}).state("inspectionTimeline",{url:"/inspection/checklists/:checklistId",templateUrl:"modules/inspection/views/inspection.checklist.client.view.html"}).state("inspectionInput",{url:"/inspection/checklists/:checklistId/questions/:questionId",templateUrl:"modules/inspection/views/input.client.view.html"}).state("fullInspection",{url:"/full_inspection/checklists/:checklistId",templateUrl:"modules/inspection/views/full_inspection.client.view.html"})}]),angular.module("inspection").controller("FullInspectionController",["$scope","$rootScope","$stateParams","$location","Authentication","FullInspectionService",function($scope,$rootScope,$stateParams,$location,Authentication,FullInspectionService){$scope.userRoles=["inspector"],$scope.authentication=Authentication,$scope.initialize=function(){$scope.userRoles.indexOf(Authentication.user.role)<0&&$location.path("/"),$scope.fullInspection=FullInspectionService.get({checklistId:$stateParams.checklistId})},$scope.goBack=function(){$location.path("inspection")}}]),angular.module("inspection").controller("InspectionChecklistController",["$scope","$rootScope","$stateParams","$location","Authentication","Users","Checklists","Inspections","PersistService","InspectionDates","$q","PersistAnswerService",function($scope,$rootScope,$stateParams,$location,Authentication,Users,Checklists,Inspections,PersistService,InspectionDates,$q,PersistAnswerService){$scope.userRoles=["inspector"],$scope.authentication=Authentication,$scope.now=new Date,$scope.initialize=function(){$scope.userRoles.indexOf(Authentication.user.role)<0&&$location.path("/"),$scope.dateInputFormat="MM/dd/yyyy",$scope.dateOptions={formatYear:"yy",startingDay:1},$scope.datePickerOpened=!1,$scope.inspectionDate=PersistService.get(),"object"!=typeof $scope.inspectionDate&&"Invalid date"!=$scope.inspectionDate||($scope.inspectionDate=moment().format("MM/DD/YYYY")),$scope.answers=[],$scope.findChecklist($stateParams.checklistId)},$scope.openDatePicker=function($event,picker){$event.preventDefault(),$event.stopPropagation(),$scope.datePickerOpened=!0},$scope.findChecklist=function(id){$scope.checklist=Checklists.get({checklistId:id}),$scope.checklist.$promise.then(function(response){console.log("checklist: ",response),$scope.answered_questions=PersistAnswerService.getAnsweredQuestions();var latestInspection=InspectionDates.get({checklistId:id,isSubmitted:-1});latestInspection.$promise.then(function(res_inspection){if(res_inspection&&!res_inspection.isSubmitted&&(res_inspection.date&&($scope.inspectionDate=res_inspection.date),$scope.answers=res_inspection.answers,res_inspection.answers&&res_inspection.answers.length>0))for(var i=0;i<res_inspection.answers.length;i++)res_inspection.answers[i].data&&$scope.answered_questions.indexOf(res_inspection.answers[i].question)<0&&(""!=res_inspection.answers[i].data.data.main_text&&(void 0==res_inspection.answers[i].data.data.main_text?""!=res_inspection.answers[i].data.data.main_single&&(void 0==res_inspection.answers[i].data.data.main_single?""!=res_inspection.answers[i].data.data.main_date&&(void 0==res_inspection.answers[i].data.data.main_date?""!=res_inspection.answers[i].data.data.main_number&&(void 0==res_inspection.answers[i].data.data.main_number||$scope.answered_questions.push(res_inspection.answers[i].question)):$scope.answered_questions.push(res_inspection.answers[i].question)):$scope.answered_questions.push(res_inspection.answers[i].question)):$scope.answered_questions.push(res_inspection.answers[i].question)),"string"==typeof res_inspection.answers[i].data.data.main_switchStatus&&""!=res_inspection.answers[i].data.data.main_switchStatus&&void 0===res_inspection.answers[i].data.data.main_single&&void 0===res_inspection.answers[i].data.data.main_text&&void 0===res_inspection.answers[i].data.data.main_date&&void 0===res_inspection.answers[i].data.data.main_number&&$scope.answered_questions.push(res_inspection.answers[i].question))})})},$scope.$watch("inspectionDate",function(newVal,oldVal){}),$scope.viewQuestionDetails=function(questionIndex){PersistService.set(moment($scope.inspectionDate).format("MM/DD/YYYY")),$location.path("inspection/checklists/"+$stateParams.checklistId+"/questions/"+questionIndex)},$scope.checkMandatoryAnswers=function(){for(var i=0;i<$scope.checklist.questions.length;i++)if($scope.checklist.questions[i].mandatory&&$scope.answered_questions.indexOf($scope.checklist.questions[i].question._id)<0)return $scope.error="Please answer all mandatory questions to submit. (Questions w/ a red asterisk.)",!1;return!0},$scope.submitInspection=function(){if($scope.checkMandatoryAnswers()){for(var answers=[],i=0;i<$scope.checklist.questions.length;i++){var answer_data={question:$scope.checklist.questions[i].question._id};if($scope.answers&&$scope.answers.length>0){var question_answer=$scope.answers.filter(function(obj){return obj.question==answer_data.question});question_answer.length>0&&(answer_data.data=question_answer[0].data)}var question_answer=PersistAnswerService.get($scope.checklist.questions[i].question._id);question_answer&&(answer_data.data=question_answer),answers.push(answer_data)}var interval=$scope.checklist.frequency.interval||1,dueDates=[];$scope.inspectionDate=new Date($scope.inspectionDate).setHours(12);var tmpDate=$scope.inspectionDate?new Date($scope.inspectionDate):new Date,maxDueDate=$scope.inspectionDate?new Date($scope.inspectionDate):new Date;for(maxDueDate.setFullYear(maxDueDate.getFullYear()+2);new Date(tmpDate)<=maxDueDate;)if(dueDates.push(new Date(tmpDate)),tmpDate=moment(tmpDate),"due"===$scope.checklist.frequency.period){var freqType=$scope.checklist.frequency.type,freqDueValue=$scope.checklist.frequency.due?$scope.checklist.frequency.due.value:0,freqDueWeek=$scope.checklist.frequency.due?$scope.checklist.frequency.due.dueWeek:0;if("Daily"===freqType)tmpDate.add(1,"days").hour(freqDueValue).minute(0).second(0);else if("Weekly"===freqType)0===freqDueValue?tmpDate.day(7):tmpDate.day(Number(freqDueValue)+7);else if("Biweekly"===freqType||"Bi-weekly"===freqType)0===freqDueValue?tmpDate.day(14):tmpDate.day(Number(freqDueValue)+14);else if("Monthly"===freqType){var nextMonthDay=tmpDate.endOf("month").add(1,"days"),add=(freqDueValue-nextMonthDay.day()+7)%7+7*Number(freqDueWeek);nextMonthDay.set("date",1+add),tmpDate=nextMonthDay}else if("Quarterly"===freqType){var quater=tmpDate.quarter();tmpDate.set("month",3*quater),tmpDate.set("date",parseInt(freqDueValue)+1)}else"Annually"===freqType&&(tmpDate.add(1,"years"),tmpDate.set("month",freqDueWeek).set("date",parseInt(freqDueValue)+1))}else"interval"===$scope.checklist.frequency.period&&tmpDate.add(interval,"days");$scope.inspection=new Inspections({date:new Date($scope.inspectionDate),site:$scope.checklist.site._id,checklist:$scope.checklist._id,answers:answers,isSubmitted:!0,editor:$scope.authentication.user._id,dueDates:dueDates}),$scope.inspection.$save(function(){console.log("saved: ",$scope.inspection),PersistService.clear(),PersistAnswerService.clear(),$location.path("inspection")},function(errorResponse){errorResponse.data&&($scope.error=errorResponse.data.message)})}},$scope.saveInspection=function(){for(var answers=[],i=0;i<$scope.checklist.questions.length;i++){var answer_data={question:$scope.checklist.questions[i].question._id};if($scope.answers&&$scope.answers.length>0){var question_answer=$scope.answers.filter(function(obj){return obj.question==answer_data.question});question_answer.length>0&&(answer_data.data=question_answer[0].data)}var question_answer=PersistAnswerService.get($scope.checklist.questions[i].question._id);question_answer&&(answer_data.data=question_answer),answers.push(answer_data)}var interval=$scope.checklist.frequency.interval,dueDates=[];$scope.inspectionDate=new Date($scope.inspectionDate).setHours(12);var tmpDate=$scope.inspectionDate?new Date($scope.inspectionDate):new Date,maxDueDate=$scope.inspectionDate?new Date($scope.inspectionDate):new Date;for(maxDueDate.setFullYear(maxDueDate.getFullYear()+2);new Date(tmpDate)<=maxDueDate;)if(dueDates.push(new Date(tmpDate)),tmpDate=moment(tmpDate),"due"===$scope.checklist.frequency.period){var freqType=$scope.checklist.frequency.type,freqDueValue=$scope.checklist.frequency.due?$scope.checklist.frequency.due.value:0,freqDueWeek=$scope.checklist.frequency.due?$scope.checklist.frequency.due.dueWeek:0;if("Daily"===freqType)tmpDate.add(1,"days").hour(freqDueValue).minute(0).second(0);else if("Weekly"===freqType)0===freqDueValue?tmpDate.day(7):tmpDate.day(Number(freqDueValue)+7);else if("Biweekly"===freqType||"Bi-weekly"===freqType)0===freqDueValue?tmpDate.day(14):tmpDate.day(Number(freqDueValue)+14);else if("Monthly"===freqType){var nextMonthDay=tmpDate.endOf("month").add(1,"days"),add=(freqDueValue-nextMonthDay.day()+7)%7+7*Number(freqDueWeek);nextMonthDay.set("date",1+add),tmpDate=nextMonthDay}else if("Quarterly"===freqType){var quater=tmpDate.quarter();tmpDate.set("month",3*quater),tmpDate.set("date",parseInt(freqDueValue)+1)}else"Annually"===freqType&&(tmpDate.add(1,"years"),tmpDate.set("month",freqDueWeek).set("date",parseInt(freqDueValue)+1))}else"interval"===$scope.checklist.frequency.period&&tmpDate.add(interval,"days");$scope.inspection=new Inspections({date:new Date($scope.inspectionDate),site:$scope.checklist.site._id,checklist:$scope.checklist._id,answers:answers,isSubmitted:!1,editor:$scope.authentication.user._id,dueDates:dueDates}),$scope.inspection.$save(function(){console.log("saved: ",$scope.inspection),PersistService.clear(),PersistAnswerService.clear(),$location.path("inspection")},function(errorResponse){errorResponse.data&&($scope.error=errorResponse.data.message)})},$scope.discard=function(){PersistService.clear(),PersistAnswerService.clear(),$location.path("inspection")},$scope.goBack=function(){PersistAnswerService.clear(),$location.path("inspection")}}]),angular.module("inspection").controller("InspectionController",["$scope","$rootScope","$location","Authentication","Users","Checklists","InspectionDates","ChecklistsByInspector","$q",function($scope,$rootScope,$location,Authentication,Users,Checklists,InspectionDates,ChecklistsByInspector,$q){if($scope.userRoles=["inspector"],$scope.authentication=Authentication,$scope.tabs=[{title:"Primary",isLoaded:!1,active:!1},{title:"Secondary",isLoaded:!1,active:!1},{title:"Tertiary",isLoaded:!1,active:!1}],void 0!==$location.search().tabIdx){var tabIcx=$location.search().tabIdx;$scope.tabs[tabIcx].active=!0,$scope.selectedTab=tabIcx}else $scope.tabs[0].active=!0,$scope.selectedTab=0;$scope.initialize=function(){$scope.userRoles.indexOf(Authentication.user.role)<0&&$location.path("/"),$scope.currentTime=moment().tz("America/New_York").format("ddd MM/DD/YYYY HH:mm a"),$scope.findUser($scope.authentication.user._id),$scope.checklists=[]},$scope.findUser=function(id){$scope.user=Users.get({userId:id}),$scope.user.$promise.then(function(response){console.log("user info: ",response)})},$scope.getChecklistsByTab=function(index){$scope.selectedTab=index,$location.search("tabIdx",index);var checklists=ChecklistsByInspector.query({inspectorId:$scope.authentication.user._id,category:index});checklists.$promise.then(function(response){$scope.findChecklists(response)})},$scope.formatInspectionDate=function(dateObj){return moment(dateObj).tz("America/New_York").format("MM/DD/YYYY")},$scope.getChecklist=function(checklistId){var successHandler=function(response){var chklist=response[0];chklist.lastInspectionDate=response[1].date||"";var dueDate=moment(chklist.lastInspectionDate).tz("America/New_York");if("due"===chklist.frequency.period){var freqType=chklist.frequency.type,freqDueValue=chklist.frequency.due?chklist.frequency.due.value:0,freqDueWeek=chklist.frequency.due?chklist.frequency.due.dueWeek:0;if("Daily"===freqType)chklist.dueDate=dueDate.add(1,"days").hour(freqDueValue).minute(0).second(0).format("MM/DD HH:mm a");else if("Weekly"===freqType)0===freqDueValue?chklist.dueDate=dueDate.day(7):chklist.dueDate=dueDate.day(Number(freqDueValue)+7),chklist.dueDate=chklist.dueDate.format("MM/DD/YYYY");else if("Biweekly"===freqType||"Bi-weekly"===freqType)0===freqDueValue?chklist.dueDate=dueDate.day(14):chklist.dueDate=dueDate.day(Number(freqDueValue)+14),chklist.dueDate=chklist.dueDate.format("MM/DD/YYYY");else if("Monthly"===freqType){var nextMonthDay=dueDate.endOf("month").add(1,"days"),add=(freqDueValue-nextMonthDay.day()+7)%7+7*Number(freqDueWeek);nextMonthDay.set("date",1+add),chklist.dueDate=nextMonthDay.format("MM/DD/YYYY")}else if("Quarterly"===freqType){
var quater=dueDate.quarter();chklist.dueDate=dueDate.set("month",3*quater).set("date",parseInt(freqDueValue)+1).format("MM/DD/YYYY")}else"Annually"===freqType&&(dueDate.add(1,"years"),dueDate.set("month",freqDueWeek).set("date",parseInt(freqDueValue)+1),chklist.dueDate=dueDate.format("MM/DD/YYYY"))}else"interval"===chklist.frequency.period&&(chklist.dueDate=dueDate.add(chklist.frequency.interval,"days").format("MM/DD/YYYY"));$scope.checklists.push(chklist),$scope.safe_checklists.push(chklist)},thenFn=function(response){return response},q1=$q.defer(),q2=$q.defer(),p1=q1.promise,p2=q2.promise,checklist=Checklists.get({checklistId:checklistId}),latestInspection=InspectionDates.get({checklistId:checklistId,isSubmitted:1});checklist.$promise.then(function(response){q1.resolve(response)}),latestInspection.$promise.then(function(response){q2.resolve(response)}),$q.all([p1.then(thenFn),p2.then(thenFn)]).then(function(values){console.log("checklist with due date: ",values),successHandler(values)})},$scope.findChecklists=function(checklistIds){$scope.checklists=[],$scope.safe_checklists=[];for(var i=0;i<checklistIds.length;i++)$scope.getChecklist(checklistIds[i]._id)},$scope.inspectChecklist=function(checklist){$rootScope.answers=void 0,$location.path("inspection/checklists/"+checklist._id),$location.search("tabIdx",$scope.selectedTab)},$scope.fullInspectionsChecklist=function(checklist){$location.path("full_inspection/checklists/"+checklist._id),$location.search("tabIdx",$scope.selectedTab)}}]),angular.module("inspection").controller("InspectionQuestionController",["$scope","$rootScope","$stateParams","Upload","$location","$window","Authentication","Users","Checklists","InspectionAnswers","Lightbox","PersistAnswerService","InspectionDates","cfpLoadingBar",function($scope,$rootScope,$stateParams,Upload,$location,$window,Authentication,Users,Checklists,InspectionAnswers,Lightbox,PersistAnswerService,InspectionDates,cfpLoadingBar){$scope.userRoles=["inspector"],$scope.authentication=Authentication,$scope.initialize=function(){$scope.userRoles.indexOf(Authentication.user.role)<0&&$location.path("/"),$scope.dateInputFormat="MM/dd/yyyy",$scope.dateOptions={formatYear:"yy",startingDay:1},$scope.datePickerOpened={main:!1,sub:!1},$scope.main_single=$scope.sub_single="",$scope.data={position:[]},$scope.actions={},$scope.inspectionDate=moment().format("MM/DD/YYYY"),$scope.findQuestion($stateParams.checklistId,$stateParams.questionId)},$scope.openDatePicker=function($event,picker){$event.preventDefault(),$event.stopPropagation(),$scope.datePickerOpened[picker]=!0},$scope.findQuestion=function(checklistId,questionId){$scope.checklist=Checklists.get({checklistId:checklistId}),$scope.checklist.$promise.then(function(response){$scope.question=response.questions[questionId].question,$scope.actions={};for(var i=0;i<$scope.question.conditionalActions.length;i++)$scope.actions[$scope.question.conditionalActions[i].condition]=$scope.question.conditionalActions[i];if(console.log("main: ",$scope.question),$scope.subQuestion=$scope.question.subQuestions[0],console.log("sub: ",$scope.subQuestion),$scope.subActions={},$scope.subQuestion)for(i=0;i<$scope.subQuestion.actions.length;i++)$scope.subActions[$scope.subQuestion.actions[i].condition]=$scope.subQuestion.actions[i];var answer=PersistAnswerService.get($scope.question._id),latestInspection=InspectionDates.get({checklistId:checklistId,isSubmitted:-1});latestInspection.$promise.then(function(res_inspection){if(!res_inspection.isSubmitted&&!answer&&res_inspection.answers&&res_inspection.answers.length>0)for(var i=0;i<res_inspection.answers.length;i++)res_inspection.answers[i].question==$scope.question._id&&(answer=res_inspection.answers[i].data);if($scope.picture={content:[],name:[]},answer){if($scope.data=angular.copy(answer.data),$scope.data.position?$scope.data.position=[].concat($scope.data.position):$scope.data.position=[],$scope.data.main_switchStatus="",$scope.data.sub_switchStatus="",$scope.action=angular.copy(answer.action),$scope.action&&($scope.data.main_switchStatus=$scope.action.condition),$scope.actionString=answer.actionString,$scope.subAction=angular.copy(answer.subAction),$scope.subAction&&($scope.data.sub_switchStatus=$scope.subAction.condition),$scope.subActionString=answer.subActionString,"Single"===$scope.question.questionType)for(i=0;i<$scope.question.conditionalActions.length;i++)$scope.data.main_single&&$scope.question.conditionalActions[i].condition==$scope.data.main_single.condition&&$scope.question.conditionalActions[i].value==$scope.data.main_single.value&&($scope.data.main_single=$scope.question.conditionalActions[i]);if($scope.subQuestion&&"Single"===$scope.subQuestion.type)for(i=0;i<$scope.subQuestion.actions.length;i++)$scope.data.sub_single&&$scope.subQuestion.actions[i].condition==$scope.data.sub_single.condition&&$scope.subQuestion.actions[i].value==$scope.data.sub_single.value&&($scope.data.sub_single=$scope.subQuestion.actions[i]);answer.data.pictureURL&&("string"==typeof answer.data.pictureURL?($scope.picture.content.push("pictures/"+answer.data.pictureURL),$scope.picture.name.push(answer.data.pictureURL)):answer.data.pictureURL.forEach(function(item){$scope.picture.content.push("pictures/"+item),$scope.picture.name.push(item)}))}else $scope.data={main_switchStatus:"",sub_switchStatus:"",position:[]}})})},$scope.removePicture=function(index){$scope.picture.content.splice(index,1),$scope.picture.name.splice(index,1)},$scope.openLightboxModal=function(index){var imgs=[];$scope.picture.content.forEach(function(item){imgs.push({url:item})}),Lightbox.openModal(imgs,index)},$scope.goBack=function(){$location.path("inspection/checklists/"+$stateParams.checklistId),$location.hash("id-"+$stateParams.questionId)},$scope.toggleMainSwitch=function(){console.log("toggle: ",$scope.data.main_switchStatus);var toggle="";"yes"==$scope.data.main_switchStatus?toggle="yes":"no"==$scope.data.main_switchStatus?toggle="no":"na"==$scope.data.main_switchStatus&&(toggle="na"),$scope.action=$scope.actions[toggle],$scope.actionString='You selected "'+toggle+'."'},$scope.evaluateNumber=function(){Number($scope.data.main_number)>$scope.actions.greaterThan.value?($scope.action=$scope.actions.greaterThan,$scope.actionString="You entered a value greater than "+$scope.actions.greaterThan.value+" "+$scope.question.numericUnit+"."):Number($scope.data.main_number)===$scope.actions.equal.value?($scope.action=$scope.actions.equal,$scope.actionString="You entered a value equal to "+$scope.actions.equal.value+" "+$scope.question.numericUnit+"."):Number($scope.data.main_number)<$scope.actions.lessThan.value?($scope.action=$scope.actions.lessThan,$scope.actionString="You entered a value less than "+$scope.actions.lessThan.value+" "+$scope.question.numericUnit+"."):($scope.action=null,$scope.actionString=""),console.log("selected action: ",$scope.action)},$scope.single_action_performed=function(){$scope.action=$scope.data.main_single,$scope.actionString='You selected "'+$scope.action.value+'".'},$scope.dateChanged=function(){var selectedDate=moment($scope.data.main_date);selectedDate.isAfter(moment($scope.actions.greaterThan.value),"day")?($scope.action=$scope.actions.greaterThan,$scope.actionString="You selected a date after "+moment($scope.action.value).format("MM/DD/YYYY")+"."):selectedDate.isSame(moment($scope.actions.equal.value),"day")?($scope.action=$scope.actions.equal,$scope.actionString="You selected a date equal to "+moment($scope.action.value).format("MM/DD/YYYY")+"."):selectedDate.isBefore(moment($scope.actions.lessThan.value),"day")?($scope.action=$scope.actions.lessThan,$scope.actionString="You selected a date before "+moment($scope.action.value).format("MM/DD/YYYY")+"."):($scope.action=null,$scope.actionString=""),console.log("selected action: ",$scope.action)},$scope.toggleSubSwitch=function(){console.log("toggle: ",$scope.data.sub_switchStatus);var toggle="";"yes"==$scope.data.sub_switchStatus?toggle="yes":"no"==$scope.data.sub_switchStatus?toggle="no":"na"==$scope.data.sub_switchStatus&&(toggle="na"),$scope.subAction=$scope.subActions[toggle],$scope.subActionString='You selected "'+toggle+'."'},$scope.evaluateSubNumber=function(){Number($scope.data.sub_number)>$scope.subActions.greaterThan.value?($scope.subAction=$scope.subActions.greaterThan,$scope.subActionString="You entered a value greater than "+$scope.subActions.greaterThan.value+" "+$scope.subQuestion.numericUnit+"."):Number($scope.data.sub_number)===$scope.subActions.equal.value?($scope.subAction=$scope.subActions.equal,$scope.subActionString="You entered a value equal to "+$scope.subActions.equal.value+" "+$scope.subQuestion.numericUnit+"."):Number($scope.data.sub_number)<$scope.subActions.lessThan.value?($scope.subAction=$scope.subActions.lessThan,$scope.subActionString="You entered a value less than "+$scope.subActions.lessThan.value+" "+$scope.subQuestion.numericUnit+"."):($scope.subAction=null,$scope.subActionString=""),console.log("selected action: ",$scope.subAction)},$scope.single_subAction_performed=function(){$scope.subAction=$scope.data.sub_single,console.log("selected action: ",$scope.subAction),$scope.subActionString='You selected "'+$scope.subAction.value+'".'},$scope.subDateChanged=function(){var selectedDate=moment($scope.data.sub_date);selectedDate.isAfter(moment($scope.subActions.greaterThan.value),"day")?($scope.subAction=$scope.subActions.greaterThan,$scope.subActionString="You selected a date after "+moment($scope.subAction.value).format("MM/DD/YYYY")+"."):selectedDate.isSame(moment($scope.subActions.equal.value),"day")?($scope.subAction=$scope.subActions.equal,$scope.subActionString="You selected a date equal to "+moment($scope.subAction.value).format("MM/DD/YYYY")+"."):selectedDate.isBefore(moment($scope.subActions.lessThan.value),"day")?($scope.subAction=$scope.subActions.lessThan,$scope.subActionString="You selected a date before "+moment($scope.subAction.value).format("MM/DD/YYYY")+"."):($scope.subAction=null,$scope.subActionString=""),console.log("selected action: ",$scope.subAction)},$scope.onFileSelect=function(file){$scope.isFileSelected=!0},$scope.$on("flow::fileSuccess",function(event,$flow,$file,$message){$scope.$apply(function(){$scope.picture.name.push(JSON.parse($message).file),$scope.picture.content.push("pictures/"+JSON.parse($message).file),$flow.files=[],$scope.uploadCount++,$scope.uploadCount==$scope.filesCount&&cfpLoadingBar.complete()})}),$scope.$on("flow::filesAdded",function(event,$flow,$files){$scope.progressUpload=!0,$scope.filesCount=$files.length,$scope.uploadCount=0,cfpLoadingBar.start()}),$scope.addGeolocation=function(){navigator.geolocation?(console.log("geolocation: ",navigator.geolocation),navigator.geolocation.getCurrentPosition(function(position){var latitude=position.coords.latitude.toString(),longitude=position.coords.longitude.toString();latitude=latitude.split(".")[0]+"."+latitude.split(".")[1].substring(0,5),longitude=longitude.split(".")[0]+"."+longitude.split(".")[1].substring(0,5),$scope.$apply(function(){$scope.data.position.push({latitude:latitude,longitude:longitude})})},function(err){alert("Geolocation is not supported by this browser.")},{enableHighAccuracy:!0,maximumAge:1e4})):$scope.error="Geolocation is not supported by this browser."},$scope.removeGeolocation=function(index){$scope.data.position.splice(index,1)},$scope.save=function(){var answer={};answer.data=angular.copy($scope.data),answer.action=angular.copy($scope.action),answer.actionString=$scope.actionString,answer.subAction=angular.copy($scope.subAction),answer.subActionString=$scope.subActionString,(!answer.action||answer.action&&"action_sub"!=answer.action.action)&&(answer.subAction=null,answer.subActionString=""),PersistAnswerService.set($scope.question._id,answer),$scope.inspectionAnswer=new InspectionAnswers({site:$scope.checklist.site._id,checklist:$scope.checklist._id,question:$scope.question._id,answer:answer,editor:$scope.authentication.user._id}),$scope.inspectionAnswer.$save(function(){$location.path("inspection/checklists/"+$stateParams.checklistId),$location.hash("id-"+$stateParams.questionId)},function(errorResponse){errorResponse.data&&($scope.error=errorResponse.data.message)})},$scope.saveAnswer=function(){$scope.data.pictureURL=$scope.picture.name,$scope.save()},$scope.cancelAnswer=function(){$location.path("inspection/checklists/"+$stateParams.checklistId),$location.hash("id-"+$stateParams.questionId)}}]),angular.module("inspection").directive("anchorScrollToId",function($anchorScroll,$location){var directive={link:function($scope,$element,$attrs){$location.hash()===$attrs.id&&$element[0].scrollIntoView()}};return directive}),angular.module("inspection").factory("Inspections",["$resource",function($resource){return $resource("inspections/:inspectionId",{inspectionId:"@_id"},{update:{method:"PUT"}})}]).factory("FullInspectionService",["$resource",function($resource){return $resource("full_inspection/:checklistId",{checklistId:"@checklistId"})}]).factory("InspectionAnswers",["$resource",function($resource){return $resource("inspections/answer",{})}]).factory("ChecklistsByInspector",["$resource",function($resource){return $resource("checklists/byInspectors/:inspectorId",{inspectorId:"@inspectorId"})}]).factory("InspectionDates",["$resource",function($resource){return $resource("inspections/duedates/:checklistId/:isSubmitted",{checklistId:"@checklistId",isSubmitted:"@isSubmitted"},{query:{method:"GET",isArray:!0}})}]).factory("PersistService",function(){function set(data){savedData=data}function get(){return savedData}function clear(){savedData={}}var savedData={};return{set:set,get:get,clear:clear}}).factory("PersistAnswerService",function(){function set(id,data){savedData[id]=data}function get(id){return savedData[id]}function getAnsweredQuestions(){var questions=[];for(var k in savedData)""!=savedData[k].data.main_text&&(void 0==savedData[k].data.main_text?""!=savedData[k].data.main_single&&(void 0==savedData[k].data.main_single?""!=savedData[k].data.main_date&&(void 0==savedData[k].data.main_date?""!=savedData[k].data.main_number&&(void 0==savedData[k].data.main_number||questions.push(k)):questions.push(k)):questions.push(k)):questions.push(k)),"string"==typeof savedData[k].data.main_switchStatus&&""!=savedData[k].data.main_switchStatus&&void 0===savedData[k].data.main_single&&void 0===savedData[k].data.main_text&&void 0===savedData[k].data.main_date&&void 0===savedData[k].data.main_number&&questions.push(k);return questions}function clear(){savedData={}}var savedData={};return{set:set,get:get,clear:clear,getAnsweredQuestions:getAnsweredQuestions}}),angular.module("questions").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Questions","questions","item",null,null,["superadmin","administrator"],1)}]),angular.module("questions").config(["$stateProvider",function($stateProvider){$stateProvider.state("adminHome",{url:"/questions",templateUrl:"modules/questions/views/bank-questions.client.view.html"}).state("question_create",{url:"/questions/new",templateUrl:"modules/questions/views/build-question.client.view.html"}).state("question_detail",{url:"/questions/:questionId/edit",templateUrl:"modules/questions/views/build-question.client.view.html"})}]),angular.module("questions").controller("BankController",["$scope","$rootScope","$stateParams","$location","Authentication","Questions","Companies","Regulatories","$modal","QuestionsByCompany","RegulatoriesByCompany","UserRole",function($scope,$rootScope,$stateParams,$location,Authentication,Questions,Companies,Regulatories,$modal,QuestionsByCompany,RegulatoriesByCompany,UserRole){$scope.filter={filter_company:"",filter_keyword:"",filter_regulatory:""},$scope.initScope=function(){$scope.userRoles=["superadmin","administrator"],$scope.authentication=Authentication,$scope.userRoles.indexOf(Authentication.user.role)<0&&$location.path("/"),$scope.isSuperAdmin=Authentication.user.role===UserRole.Superadmin,$scope.filter.filter_company=$rootScope.question_filter_company||"",$rootScope.question_filter_company="",$scope.typeString={none:"none","Yes/No":"Yes/No toggle","Yes/No/NA":"Yes/No/NA toggle",Numeric:"Numerical entry",Single:"Single select",Date:"Date picker",Text:"Text entry"},$scope.orderCriterion=$rootScope.question_orderCriterion||"updated",$rootScope.question_orderCriterion="",$rootScope.question_orderReverse===!1?$scope.orderReverse=!1:$scope.orderReverse=!0,$rootScope.question_orderReverse="",$scope.companies=Companies.query();var defaultCompany="all";Authentication.user.role===UserRole.Administrator&&(defaultCompany=Authentication.user.company),$scope.selectedCompany=$rootScope.question_selectedCompany||defaultCompany,$rootScope.question_selectedCompany="",$scope.find()},$scope.create=function(){$location.path("/questions/new")},$scope.find=function(){"all"===$scope.selectedCompany?($scope.questions=Questions.query(),$scope.regulatories=Regulatories.query()):($scope.questions=QuestionsByCompany.query({companyId:$scope.selectedCompany}),$scope.regulatories=RegulatoriesByCompany.query({companyId:$scope.selectedCompany})),$scope.questions.$promise.then(function(result){$scope.getKeywords(),$scope.filterQuestions()}),$scope.regulatories.$promise.then(function(result){$scope.filter.filter_regulatory=$rootScope.question_filter_regulatory||"",$rootScope.question_filter_regulatory="",$scope.filterQuestions()})},$scope.findOne=function(id){$scope.question=Questions.get({questionId:id})},$scope.getKeywords=function(){$scope.keywords=[];for(var i=0;i<$scope.questions.length;i++)for(var keywords=$scope.questions[i].keywords,j=0;j<keywords.length;j++)$scope.keywords.indexOf(keywords[j])<0&&keywords[j]&&$scope.keywords.push(keywords[j]);$scope.filter.filter_keyword=$rootScope.question_filter_keyword||"",$rootScope.question_filter_keyword=""},$scope.openQuestion=function(question){$rootScope.question_filter_company=$scope.filter.filter_company,$rootScope.question_filter_keyword=$scope.filter.filter_keyword,$rootScope.question_filter_regulatory=$scope.filter.filter_regulatory,$rootScope.question_orderReverse=$scope.orderReverse,$rootScope.question_orderCriterion=$scope.orderCriterion,$rootScope.question_selectedCompany=$scope.selectedCompany,$location.path("/questions/"+question._id+"/edit")},$scope.addToChecklist=function(){for(var selectedQuestions=[],i=0;i<$scope.questions.length;i++)$scope.questions[i].isChecked&&selectedQuestions.push($scope.questions[i]);if(0!==selectedQuestions.length){var modalInstance=$modal.open({controller:"ChecklistAddModalCtrl",templateUrl:"modules/questions/views/modal.add.checklist.html",resolve:{questions:function(){return selectedQuestions},isSuperAdmin:function(){return $scope.isSuperAdmin},selectedCompany:function(){return $scope.selectedCompany}}});modalInstance.result.then(function(modalResult){$scope.find()},function(){console.log("Modal dismissed at: "+new Date)})}},$scope.openChecklist=function(checklist){$location.path("/checklists/"+checklist._id+"/edit")},$scope.copyQuestion=function(originalQuestion){var question=new Questions({regulatory:!0});question.text="Copy of "+originalQuestion.text,question.citation=originalQuestion.citation,question.conditionalActions=angular.copy(originalQuestion.conditionalActions),question.isChecked=originalQuestion.isChecked,question.isComment=originalQuestion.isComment,question.isGeoTag=originalQuestion.isGeoTag,question.isMedia=originalQuestion.isMedia,question.isPhoto=originalQuestion.isPhoto,question.keywords=angular.copy(originalQuestion.keywords),question.note=originalQuestion.note,question.numericUnit=originalQuestion.numericUnit,question.questionType=originalQuestion.questionType,question.regulatory=originalQuestion.regulatory,question.regulatory_framework=originalQuestion.regulatory_framework?originalQuestion.regulatory_framework._id:null,question.subQuestions=angular.copy(originalQuestion.subQuestions),question.company=originalQuestion.company._id,question.updated=moment(),question.$save(function(){question.company=originalQuestion.company,$scope.questions.push(question),$scope.filterQuestions()},function(error){console.log(error)})},$scope.picture={},$scope.copyQuestions=function(){for(var selectedQuestions=[],i=0;i<$scope.questions.length;i++)$scope.questions[i].isChecked&&selectedQuestions.push($scope.questions[i]);if(0!==selectedQuestions.length){var modalInstance=$modal.open({controller:"CopyModalController",templateUrl:"modules/questions/views/modal.copy.question.html",resolve:{questions:function(){return selectedQuestions}}});modalInstance.result.then(function(modalResult){for(var i=0;i<$scope.questions.length;i++)$scope.questions[i].isChecked&&($scope.copyQuestion($scope.questions[i]),$scope.questions[i].isChecked=!1)},function(){console.log("Modal dismissed at: "+new Date)})}},$scope.deleteQuestion=function(){for(var selectedQuestions=[],i=0;i<$scope.questions.length;i++)$scope.questions[i].isChecked&&selectedQuestions.push($scope.questions[i]);if(0!==selectedQuestions.length){var modalInstance=$modal.open({controller:"QuestionDelModalCtrl",templateUrl:"modules/questions/views/modal.delete.question.html",resolve:{questions:function(){return selectedQuestions}}});modalInstance.result.then(function(modalResult){for(var i=$scope.questions.length;i--;)$scope.questions[i].isChecked&&(Questions.delete({questionId:$scope.questions[i]._id}),$scope.questions.splice(i,1));$scope.filterQuestions(),console.log("after deletion: ",$scope.questions)},function(){console.log("Modal dismissed at: "+new Date)})}},$scope.generateDate=function(dateStr){return moment(dateStr).tz("America/New_York").format("MM/DD/YYYY HH:mm a")},$scope.filterByCompany=function(){$scope.filter.filter_company?$scope.selectedCompany=$scope.filter.filter_company._id:$scope.selectedCompany="all",$scope.find()},$scope.filterQuestions=function(){$scope.filteredQuestions=[];for(var i=0;i<$scope.questions.length;i++)(void 0===$scope.filter.filter_keyword||!$scope.filter.filter_keyword||$scope.questions[i].keywords.indexOf($scope.filter.filter_keyword)>=0)&&(void 0!==$scope.filter.filter_regulatory&&$scope.filter.filter_regulatory&&$scope.questions[i].regulatory_framework._id!==$scope.filter.filter_regulatory._id||$scope.filteredQuestions.push($scope.questions[i]))},$scope.sortBy=function(criterion){$scope.orderCriterion===criterion?$scope.orderReverse=!$scope.orderReverse:("updated"===criterion?$scope.orderReverse=!0:$scope.orderReverse=!1,$scope.orderCriterion=criterion)}}]),angular.module("questions").controller("BuildController",["$scope","$stateParams","$location","Authentication","Questions","QuestionType","$modal","Regulatories","Companies","RegulatoriesByCompany","UserRole",function($scope,$stateParams,$location,Authentication,Questions,QuestionType,$modal,Regulatories,Companies,RegulatoriesByCompany,UserRole){$scope.initialize=function(){$scope.userRoles=["superadmin","administrator"],$scope.authentication=Authentication,$scope.userRoles.indexOf(Authentication.user.role)<0&&$location.path("/"),$scope.isSuperAdmin=Authentication.user.role===UserRole.Superadmin,$scope.data={},$scope.dateFormats=["MM/dd/yyyy","yyyy/MM/dd","dd.MM.yyyy","shortDate"],$scope.dateInputFormat=$scope.dateFormats[0],$scope.altInputFormats=["M!/d!/yyyy"],$scope.opened=[],$scope.dateOptions={formatYear:"yy",startingDay:1},$scope.checklists=[],$scope.regulatories=[],$scope.regulatory=[],$scope.type_numeric={},$stateParams.questionId?$scope.findOne():($scope.question=new Questions({keywords:[],regulatory:!1,conditionalActions:[],subQuestions:[],isComment:!1,isPhoto:!1,isGeoTag:!1,isMedia:!1,updated:moment()}),$scope.isSuperAdmin||($scope.question.company=Authentication.user.company),$scope.breadcrumbLabel="New Question",$scope.find()),$scope.multiselectSettings={showCheckAll:!1,showUncheckAll:!1,displayProp:"name",idProp:"_id",smartButtonMaxItems:3,smartButtonTextConverter:function(itemText,originalItem){return itemText}}},$scope.filterByCompany=function(){$scope.regulatory=[],$scope.data.company?($scope.isSuperAdmin?$scope.selectedCompany=$scope.data.company._id:$scope.selectedCompany=$scope.data.company,$scope.regulatories=RegulatoriesByCompany.query({companyId:$scope.selectedCompany}),$scope.regulatories.$promise.then(function(result){})):$scope.regulatories=[]},$scope.open=function($event,index){$event.preventDefault(),$event.stopPropagation();for(var key in $scope.opened)$scope.opened.hasOwnProperty(key)&&($scope.opened[key]=!1);$scope.opened[index]=!0},$scope.find=function(){$scope.companies=Companies.query(),$scope.companies.$promise.then(function(result){var keywords=[];Questions.query().$promise.then(function(response){for(var i=0;i<response.length;i++)for(var j=0;j<response[i].keywords.length;j++)keywords.indexOf(response[i].keywords[j])<0&&keywords.push(response[i].keywords[j]);for($scope.returnKeywords=[],i=0;i<keywords.length;i++)$scope.returnKeywords.push({text:keywords[i]});$scope.resetQuestion()})})},$scope.findOne=function(){$scope.question=Questions.get({questionId:$stateParams.questionId}),$scope.question.$promise.then(function(response){"administrator"===$scope.authentication.user.role&&($scope.question.company._id!==$scope.authentication.user.company&&$location.path("/"),$scope.question.company=$scope.question.company._id),console.log("fetched: ",response),$scope.breadcrumbLabel="Question Details ["+$scope.question.text+"]",$scope.find()})},$scope.onTypeChanged=function(){var conditions=QuestionType.getConditions($scope.questionType);$scope.actions=[];for(var i=0;i<conditions.length;i++){var newCondition={params:{text:conditions[i].text,inputType:conditions[i].inputType},action:{condition:conditions[i].condition,value:""}};$scope.actions.push(newCondition)}$scope.questionType&&"Text"!==$scope.questionType?$scope.subQuestions&&0!==$scope.subQuestions.length||($scope.subQuestions=[{text:"",actions:[]}]):$scope.subQuestions=[]},$scope.onSubTypeChanged=function(questionIndex){var conditions=QuestionType.getConditions($scope.subQuestions[questionIndex].type);$scope.subQuestions[questionIndex].actions=[];for(var i=0;i<conditions.length;i++){var newCondition={params:{text:conditions[i].text,inputType:conditions[i].inputType},action:{condition:conditions[i].condition,value:""}};$scope.subQuestions[questionIndex].actions.push(newCondition)}},$scope.isFormValid=function(){if($scope.isSuperAdmin&&!$scope.data.company)return $scope.error="Please select company.",!1;if(!$scope.questionText||!$scope.questionText.length)return $scope.error="Please type in the question text.",!1;if("yes"===$scope.optRegulatory&&0==$scope.regulatory.length)return $scope.error="Please select regulatory framework.",!1;if(!$scope.questionType)return $scope.error="Please select question type.",!1;for(var i=0;i<$scope.subQuestions.length;i++)if($scope.subQuestions[i].text&&!$scope.subQuestions[i].type)return $scope.error="Please select sub-question type.",!1;return $scope.error=null,!0},$scope.saveText=function(saveAll){$scope.question.text=$scope.questionText,$scope.isSuperAdmin&&($scope.question.company=$scope.data.company._id),$scope.question.updated=$scope.lastUpdated=moment(),$scope.question.editor=$scope.authentication.user._id,$scope.saveKeywords()},$scope.resetText=function(){$scope.questionText=$scope.question.text,$scope.data.company=$scope.question.company,$scope.filterByCompany(),$scope.question.editor?$scope.editor=" by ["+$scope.question.editor.username+"]":$scope.editor=""},$scope.saveKeywords=function(saveAll){for(var keywords=[],i=0;i<$scope.keywords.length;i++)keywords.push($scope.keywords[i].text);$scope.question.keywords=keywords,$scope.question.regulatory="yes"===$scope.optRegulatory,$scope.question.regulatory?$scope.question.regulatory_framework=$scope.regulatory.map(function(item){return item.id}):$scope.question.regulatory_framework=[],$scope.question.citation=$scope.citation,$scope.question.note=$scope.note,$scope.saveQuestionType()},$scope.resetKeywords=function(){$scope.keywords=[];for(var i=0;i<$scope.question.keywords.length;i++)$scope.keywords.push({text:$scope.question.keywords[i]});$scope.regulatory=[].concat($scope.question.regulatory_framework||[]),$scope.regulatory=$scope.regulatory.map(function(item){return{id:item._id}}),$scope.optRegulatory=$scope.question.regulatory?"yes":"no",$scope.citation=$scope.question.citation,$scope.note=$scope.question.note,$scope.checklists=$scope.question.checklists},$scope.openChecklist=function(checklist){$location.path("/checklists/"+checklist._id+"/edit")},$scope.saveQuestionType=function(saveAll){$scope.question.questionType=$scope.questionType,$scope.question.numericUnit=$scope.type_numeric.numericUnit;for(var actions=[],i=0;i<$scope.actions.length;i++)actions.push($scope.actions[i].action);$scope.question.conditionalActions=angular.copy(actions),$scope.saveSubQuestions()},$scope.resetQuestionType=function(){$scope.questionType=$scope.question.questionType,$scope.type_numeric.numericUnit=$scope.question.numericUnit||"",$scope.onTypeChanged();for(var i=0;i<$scope.actions.length;i++)$scope.actions[i].action=angular.copy($scope.question.conditionalActions[i])},$scope.saveSubQuestions=function(saveAll){$scope.question.subQuestions=angular.copy($scope.subQuestions);for(var j=0;j<$scope.subQuestions.length;j++){for(var actions=[],i=0;i<$scope.subQuestions[j].actions.length;i++)actions.push($scope.subQuestions[j].actions[i].action);$scope.question.subQuestions[j].actions=angular.copy(actions)}$scope.saveSettings()},$scope.resetSubQuestions=function(){$scope.subQuestions=angular.copy($scope.question.subQuestions);for(var j=0;j<$scope.subQuestions.length;j++){$scope.onSubTypeChanged(j);for(var i=0;i<$scope.subQuestions[j].actions.length;i++)$scope.subQuestions[j].actions[i].action=angular.copy($scope.question.subQuestions[j].actions[i])}},$scope.saveSettings=function(){$scope.question.isComment=$scope.chk_comments,$scope.question.isPhoto=$scope.chk_photo,$scope.question.isGeoTag=$scope.chk_geoTag,$scope.question.isMedia=$scope.chk_media},$scope.resetSettings=function(){$scope.chk_comments=$scope.question.isComment,$scope.chk_photo=$scope.question.isPhoto,$scope.chk_geoTag=$scope.question.isGeoTag,$scope.chk_media=$scope.question.isMedia},$scope.saveQuestion=function(){$scope.isFormValid()&&(console.log($scope.question),$scope.saveText(!0),$scope.question._id?$scope.question.$update(function(){console.log("saved: ",$scope.question),$location.path("questions")},function(errorResponse){errorResponse.data&&($scope.error=errorResponse.data.message)}):$scope.question.$save(function(){console.log("saved: ",$scope.question),$location.path("questions")},function(errorResponse){errorResponse.data&&($scope.error=errorResponse.data.message)}))},$scope.resetQuestion=function(){$scope.resetText(),$scope.resetKeywords(),$scope.resetQuestionType(),$scope.resetSubQuestions(),$scope.resetSettings(),$scope.lastUpdated=moment($scope.question.updated).tz("America/New_York")},$scope.addCondition=function(qIndex){var newCondition={params:{text:"",inputType:"text"},action:{condition:"equal",value:""}};qIndex<0?$scope.actions.push(newCondition):$scope.subQuestions[qIndex].actions.push(newCondition)},$scope.removeCondition=function(qIndex,cIndex){var modalInstance=$modal.open({templateUrl:"modules/questions/views/modal-confirm.html",controller:"ModalController",resolve:{}});modalInstance.result.then(function(modalResult){"ok"===modalResult&&(qIndex<0?$scope.actions.splice(cIndex,1):$scope.subQuestions[qIndex].actions.splice(cIndex,1))},function(){console.log("Modal dismissed at: "+new Date)})},$scope.loadKeywordsTags=function(query){return $scope.returnKeywords.filter(function(obj){return obj.text.toLowerCase().indexOf(query.toLowerCase())>-1})},$scope.cancel=function(){$location.path("questions")}}]),angular.module("questions").controller("ModalController",["$scope","$modalInstance",function($scope,$modalInstance){$scope.ok=function(){$modalInstance.close("ok")},
$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]).controller("ChecklistAddModalCtrl",["$scope","$modalInstance","Questions","questions","Checklists","isSuperAdmin","selectedCompany","SitesByCompany","$http","$q","$filter",function($scope,$modalInstance,Questions,questions,Checklists,isSuperAdmin,selectedCompany,SitesByCompany,$http,$q,$filter){if($scope.questions=questions,$scope.fetchSites=function(question){var deffered=$q.defer();return SitesByCompany.query({companyId:question.company._id}).$promise.then(function(response){deffered.resolve(response)}),deffered.promise},isSuperAdmin){for(var promises=[],i=0;i<$scope.questions.length;i++)promises.push($scope.fetchSites($scope.questions[i]));$q.all(promises).then(function(res){for(var sites=[],i=0;i<res.length;i++)if(res[i]&&res[i].length>0)for(var j=0;j<res[i].length;j++){var found=$filter("filter")(sites,{id:res[i][j]._id},!0);0==found.length&&sites.push({id:res[i][j]._id})}$http.post("/checklists/bySites",sites).success(function(response){$scope.checklists=response}).error(function(response){console.log("login error: ",response),$scope.error=response.message})})}else SitesByCompany.query({companyId:selectedCompany}).$promise.then(function(response){for(var sites=[],i=0;i<response.length;i++)sites.push({id:response[i]._id});$http.post("/checklists/bySites",sites).success(function(response){$scope.checklists=response}).error(function(response){console.log("login error: ",response),$scope.error=response.message})});$scope.ok=function(){if(!$scope.checklist)return void($scope.error="Please select checklist.");for(var promises=[],i=0;i<$scope.questions.length;i++){var existsChecklists=$scope.questions[i].checklists.filter(function(obj){return obj._id==$scope.checklist._id}).length;if(0==existsChecklists)$scope.questions[i].checklists.push($scope.checklist._id),$scope.checklist.questions.push({mandatory:!0,order:$scope.checklist.questions.length+1,question:$scope.questions[i]._id}),promises.push($scope.addQuestionChecklist($scope.questions[i]));else{var existsQuestion=$scope.checklist.questions.filter(function(obj){return obj.question&&obj.question._id==$scope.questions[i]._id}).length;0==existsQuestion&&$scope.checklist.questions.push({mandatory:!0,order:$scope.checklist.questions.length+1,question:$scope.questions[i]._id})}}$q.all(promises).then(function(res){$scope.checklist.updated=moment(),Checklists.update($scope.checklist,function(res){$modalInstance.close("ok")})})},$scope.addQuestionChecklist=function(question){var deffered=$q.defer();return Questions.update(question,function(res){deffered.resolve({success:!0})}),deffered.promise},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]).controller("CopyModalController",["$scope","$modalInstance","questions",function($scope,$modalInstance,questions){$scope.questions=questions,$scope.ok=function(){$modalInstance.close("ok")},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]).controller("QuestionDelModalCtrl",["$scope","$modalInstance","questions",function($scope,$modalInstance,questions){$scope.questions=questions,$scope.ok=function(){$modalInstance.close("ok")},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]),angular.module("questions").factory("Questions",["$resource",function($resource){return $resource("questions/:questionId",{questionId:"@_id"},{update:{method:"PUT"}})}]).factory("QuestionsByCompany",["$resource",function($resource){return $resource("questions/company/:companyId",{companyId:"@companyId"})}]),angular.module("questions").service("QuestionType",function(){this.getConditions=function(type){return"Yes/No"===type?[{condition:"yes",text:"Yes",inputType:"none"},{condition:"no",text:"No",inputType:"none"}]:"Yes/No/NA"===type?[{condition:"yes",text:"Yes",inputType:"none"},{condition:"no",text:"No",inputType:"none"},{condition:"na",text:"N/A",inputType:"none"}]:"Numeric"===type?[{condition:"greaterThan",text:">",inputType:"number"},{condition:"lessThan",text:"<",inputType:"number"},{condition:"equal",text:"=",inputType:"number"}]:"Single"===type?[{condition:"equal",text:"",inputType:"text"},{condition:"equal",text:"",inputType:"text"},{condition:"equal",text:"",inputType:"text"}]:"Date"===type?[{condition:"greaterThan",text:"After",inputType:"date"},{condition:"lessThan",text:"Before",inputType:"date"},{condition:"equal",text:"Equal To",inputType:"date"}]:"Text"===type?[{condition:"",text:"",inputType:"text"}]:[]}}),angular.module("regulatories").run(["Menus",function(Menus){Menus.addSubMenuItem("topbar","admin","Regulatory Frameworks","regulatories",null,!0,["superadmin","administrator"],3)}]),angular.module("regulatories").config(["$stateProvider",function($stateProvider){$stateProvider.state("regulatory_list",{url:"/regulatories",templateUrl:"modules/regulatory/views/list-regulatories.client.view.html"}).state("regulatory_create",{url:"/regulatories/new",templateUrl:"modules/regulatory/views/create-regulatory.client.view.html"}).state("regulatory_detail",{url:"/regulatories/:regulatoryId/edit",templateUrl:"modules/regulatory/views/create-regulatory.client.view.html"})}]),angular.module("regulatories").controller("RegulatoryCreateController",["$scope","$stateParams","$location","Authentication","Companies","Regulatories","RegulatorySrv","UserRole",function($scope,$stateParams,$location,Authentication,Companies,Regulatories,RegulatorySrv,UserRole){$scope.initialize=function(){$scope.userRoles=["superadmin","administrator"],$scope.authentication=Authentication,$scope.isSuperAdmin=Authentication.user.role===UserRole.Superadmin,$scope.userRoles.indexOf(Authentication.user.role)<0&&$location.path("/"),$scope.data={},$stateParams.regulatoryId?$scope.findOne($stateParams.regulatoryId):($scope.breadcrumbLabel="New Framework",$scope.regulatory=new Regulatories({name:"",status:!0}),$scope.isSuperAdmin||($scope.regulatory.company=Authentication.user.company),$scope.reset()),$scope.companies=Companies.query()},$scope.findOne=function(id){$scope.regulatory=Regulatories.get({regulatoryId:id}),$scope.regulatory.$promise.then(function(response){"administrator"===$scope.authentication.user.role&&($scope.regulatory.company._id!==$scope.authentication.user.company&&$location.path("/"),$scope.regulatory.company=$scope.regulatory.company._id),$scope.breadcrumbLabel="Regulatory Framework Details ["+$scope.regulatory.name+"]",$scope.reset()})},$scope.isFormValid=function(){return $scope.isSuperAdmin&&!$scope.data.company?$scope.error="Please select company.":$scope.regulatoryName&&$scope.regulatoryName.length?$scope.error=null:$scope.error="Please fill in regulatory framework.",!$scope.error},$scope.save=function(){$scope.isFormValid()&&($scope.regulatory.updated=$scope.lastUpdated=moment(),$scope.regulatory.name=$scope.regulatoryName,$scope.isSuperAdmin&&($scope.regulatory.company=$scope.data.company._id),$scope.regulatory.status="true"===$scope.status,$scope.regulatory.editor=$scope.authentication.user._id,$scope.regulatory._id?$scope.regulatory.$update(function(response){$location.path("regulatories")}):$scope.regulatory.$save(function(response){$location.path("regulatories")}))},$scope.reset=function(){$scope.data.company=$scope.regulatory.company,$scope.regulatoryName=$scope.regulatory.name,$scope.status=$scope.regulatory.status?"true":"false",$scope.regulatory.editor?$scope.editor=" by ["+$scope.regulatory.editor.username+"]":$scope.editor="",$scope.lastUpdated=moment($scope.regulatory.updated).tz("America/New_York")},$scope.cancel=function(){$location.path("regulatories")}}]),angular.module("regulatories").controller("RegulatoriesController",["$scope","$http","$stateParams","$location","Authentication","Companies","Regulatories","RegulatorySrv","UserRole","RegulatoriesByCompany","PersistSortService",function($scope,$http,$stateParams,$location,Authentication,Companies,Regulatories,RegulatorySrv,UserRole,RegulatoriesByCompany,PersistSortService){$scope.userRoles=["superadmin","administrator"],$scope.authentication=Authentication,$scope.isSuperAdmin=Authentication.user.role===UserRole.Superadmin,$scope.admin="Regulatory",$scope.isHideInactivate=!0,$scope.lastUpdated=moment().tz("America/New_York"),$scope.sortColumn={name:!0,company:!1,status:!1},$scope.persistSort=function(item){1==$scope.sortColumn[item]?($scope.sortColumn={name:!1,company:!1,status:!1},$scope.sortColumn[item]="reverse"):0==$scope.sortColumn[item]?($scope.sortColumn={name:!1,company:!1,status:!1},$scope.sortColumn[item]=!0):"reverse"==$scope.sortColumn[item]&&($scope.sortColumn={name:!1,company:!1,status:!1},$scope.sortColumn[item]=!1),PersistSortService.set("regulatory_sort",$scope.sortColumn)},$scope.create=function(){$location.path("regulatories/new")},$scope.find=function(){PersistSortService.get("regulatory_sort")&&($scope.sortColumn=PersistSortService.get("regulatory_sort")),$scope.userRoles.indexOf(Authentication.user.role)<0&&$location.path("/"),$scope.isSuperAdmin?$scope.findAll():$scope.findByCompany()},$scope.findAll=function(){$http.get("/regulatories/all").success(function(response){$scope.regulatories=$scope.safeRegulatories=response}).error(function(response){$scope.error=response.message,console.log("error: ",response)})},$scope.findByCompany=function(){$scope.regulatories=$scope.safeRegulatories=RegulatoriesByCompany.query({companyId:Authentication.user.company})},$scope.findOne=function(){$scope.regulatory=Regulatories.get({regulatoryId:$stateParams.regulatoryId})},$scope.editRegulatory=function(regulatory){RegulatorySrv.regulatory=regulatory,$location.path("regulatories/"+regulatory._id+"/edit")},$scope.adminChanged=function(){"Users"===$scope.admin?$location.path("users"):"Companies"===$scope.admin?$location.path("companies"):"Sites"===$scope.admin?$location.path("sites"):"Frequencies"===$scope.admin&&$location.path("frequencies")},$scope.sortByStatus=function(row){return!row.status}}]),angular.module("regulatories").factory("Regulatories",["$resource",function($resource){return $resource("regulatories/:regulatoryId",{regulatoryId:"@_id"},{update:{method:"PUT"}})}]).factory("RegulatoriesByCompany",["$resource",function($resource){return $resource("regulatories/company/:companyId",{companyId:"@companyId"})}]).service("RegulatorySrv",function(){this.regulatory={}}),angular.module("reports").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Reports","reports","item",null,null,["superadmin","administrator","supervisor"],3)}]),angular.module("reports").config(["$stateProvider",function($stateProvider){$stateProvider.state("reports",{url:"/reports",templateUrl:"modules/reports/views/reports.client.view.html"}).state("report_create_management",{url:"/reports/new_management_inspection",templateUrl:"modules/reports/views/build.management.report.client.view.html"}).state("report_edit_management",{url:"/reports/management_inspection/:reportId/edit",templateUrl:"modules/reports/views/build.management.report.client.view.html"}).state("report_create_regulatory",{url:"/reports/new_regulatory_inspection",templateUrl:"modules/reports/views/build.regulatory.report.client.view.html"}).state("report_inspection_timeline",{url:"/reports/inspection_timeline",templateUrl:"modules/reports/views/build.timeline.report.client.view.html"}).state("report_edit_regulatory",{url:"/reports/regulatory_inspection/:reportId/edit",templateUrl:"modules/reports/views/build.regulatory.report.client.view.html"}).state("reg_framework_pdf",{url:"/reports/reg_framework_pdf",templateUrl:"modules/reports/views/pdf.report.reg.framework.client.view.html"}).state("reg_inspector_pdf",{url:"/reports/reg_inspector_pdf",templateUrl:"modules/reports/views/pdf.report.reg.inspector.client.view.html"}).state("reg_date_pdf",{url:"/reports/reg_date_pdf",templateUrl:"modules/reports/views/pdf.report.reg.date.client.view.html"}).state("mgmt_framework_pdf",{url:"/reports/mgmt_framework_pdf",templateUrl:"modules/reports/views/pdf.report.mgmt.framework.client.view.html"}).state("mgmt_inspector_pdf",{url:"/reports/mgmt_inspector_pdf",templateUrl:"modules/reports/views/pdf.report.mgmt.inspector.client.view.html"}).state("mgmt_date_pdf",{url:"/reports/mgmt_date_pdf",templateUrl:"modules/reports/views/pdf.report.mgmt.date.client.view.html"})}]),angular.module("reports").controller("MgmtReportsBuildController",["$scope","$rootScope","$stateParams","$modal","$location","Authentication","Companies","ChecklistsByCompany","InspectorsByCompany","RegulatoriesByCompany","Reports","UserRole","InspectorsByChecklist","ReportData","Checklists",function($scope,$rootScope,$stateParams,$modal,$location,Authentication,Companies,ChecklistsByCompany,InspectorsByCompany,RegulatoriesByCompany,Reports,UserRole,InspectorsByChecklist,ReportData,Checklists){var i;$scope.initialize=function(){$scope.userRoles=["superadmin","administrator","supervisor"],$scope.authentication=Authentication,$scope.isSuperAdmin=Authentication.user.role===UserRole.Superadmin,$scope.userRoles.indexOf(Authentication.user.role)<0&&$location.path("/"),$scope.data={},$scope.checklists=[],$scope.breadcrumbLabel=$scope.reportName="Management Report",$scope.find(),$scope.multiselectSettings1={showCheckAll:!1,showUncheckAll:!1,displayProp:"displayName",idProp:"_id",smartButtonMaxItems:3,smartButtonTextConverter:function(itemText,originalItem){return itemText}},$scope.multiselectSettings2={showCheckAll:!1,showUncheckAll:!1,displayProp:"name",idProp:"_id",smartButtonMaxItems:3,smartButtonTextConverter:function(itemText,originalItem){return itemText}},$scope.dateInputFormat="MM/dd/yyyy",$scope.dateOptions={formatYear:"yy",startingDay:1},$scope.datePickerOpened={startDate:!1,endDate:!1},$scope.startDate=moment().subtract(90,"days").format("MM/DD/YYYY"),$scope.endDate=moment().format("MM/DD/YYYY"),$scope.initializeReport()},$scope.find=function(){$scope.inspectors=[],$scope.selInspectors=[],$scope.regulatories=[],$scope.selRegulatories=[],$scope.isSuperAdmin?$scope.companies=Companies.query():$scope.data.company=Authentication.user.company},$scope.initializeReport=function(){$scope.initializing=!0,$stateParams.reportId?($scope.report=Reports.get({reportId:$stateParams.reportId}),$scope.report.$promise.then(function(result){console.log("report: ",result),$scope.isSuperAdmin?$scope.data.company=result.company:$scope.data.company=result.company._id,result.fromDate&&($scope.startDate=moment(result.fromDate).format("MM/DD/YYYY")),result.toDate&&($scope.endDate=moment(result.toDate).format("MM/DD/YYYY")),$scope.groupBy=result.groupBy,$scope.reportName=result.name,$scope.filterByCompany()})):($scope.report=new Reports({}),$scope.filterByCompany())},$scope.filterByChecklist=function(){$scope.data.checklist?($scope.inspectors=InspectorsByChecklist.query({checklistId:$scope.data.checklist._id}),$scope.inspectors.$promise.then(function(result){if($scope.report._id&&$scope.initializing)for(i=0;i<$scope.report.inspectors.length;i++)$scope.selInspectors.push({id:$scope.report.inspectors[i]._id});else for(i=0;i<$scope.inspectors.length;i++)$scope.selInspectors.push({id:$scope.inspectors[i]._id})})):$scope.inspectors=[]},$scope.filterByCompany=function(){$scope.data.checklist=null,$scope.site="",$scope.data.checklist="",$scope.checklists=[],$scope.inspectors=[],$scope.selInspectors=[],$scope.regulatories=[],$scope.selRegulatories=[],$scope.data.company?($scope.isSuperAdmin?$scope.selectedCompany=$scope.data.company._id:$scope.selectedCompany=Authentication.user.company,$scope.checklists=ChecklistsByCompany.query({companyId:$scope.selectedCompany}),$scope.regulatories=RegulatoriesByCompany.query({companyId:$scope.selectedCompany}),$scope.regulatories.$promise.then(function(result){if($scope.report._id&&$scope.initializing){for(i=0;i<$scope.report.regulatories.length;i++)$scope.selRegulatories.push({id:$scope.report.regulatories[i]._id});$scope.data.checklist=Checklists.get({checklistId:$scope.report.checklist._id}),$scope.data.checklist.$promise.then(function(checklistResult){for(i=0;i<$scope.checklists.length;i++)$scope.checklists[i]._id==$scope.data.checklist._id&&($scope.data.checklist=$scope.checklists[i]);$scope.filterByChecklist()})}else for(i=0;i<$scope.regulatories.length;i++)$scope.selRegulatories.push({id:$scope.regulatories[i]._id})})):$scope.selectedCompany="none"},$scope.onInspectorSelected=function(){console.log($scope.selInspectors)},$scope.onRegulatorySelected=function(){},$scope.openDatePicker=function($event,picker){$event.preventDefault(),$event.stopPropagation();for(var key in $scope.datePickerOpened)$scope.datePickerOpened.hasOwnProperty(key)&&($scope.datePickerOpened[key]=!1);$scope.datePickerOpened[picker]=!0},$scope.isFormValid=function(){return $scope.isSuperAdmin&&!$scope.data.company?($scope.error="Please select company.",!1):$scope.data.checklist?$scope.selInspectors?$scope.selRegulatories?$scope.groupBy?new Date($scope.startDate)>new Date($scope.endDate)?($scope.error="Please select appropriate date range.",!1):($scope.error=null,!0):($scope.error="Please select group option.",!1):($scope.error="Please select at least 1 regulatory framework.",!1):($scope.error="Please select at least 1 inspector.",!1):($scope.error="Please select checklist.",!1)},$scope.generateReport=function(){if($scope.isFormValid()){$scope.isSuperAdmin?ReportData.company=$scope.data.company._id:ReportData.company=$scope.data.company,ReportData.checklist=$scope.data.checklist._id;var i,j,selectedInspectors=[],selectedRegulatories=[];for(i=0;i<$scope.inspectors.length;i++)for(j=0;j<$scope.selInspectors.length;j++)$scope.inspectors[i]._id===$scope.selInspectors[j].id&&selectedInspectors.push($scope.inspectors[i]);for(i=0;i<$scope.regulatories.length;i++)for(j=0;j<$scope.selRegulatories.length;j++)$scope.regulatories[i]._id===$scope.selRegulatories[j].id&&selectedRegulatories.push($scope.regulatories[i]);ReportData.inspectors=selectedInspectors,ReportData.frameworks=selectedRegulatories,ReportData.fromDate=moment($scope.startDate),ReportData.toDate=moment($scope.endDate),ReportData.groupBy=$scope.groupBy,"date"===$scope.groupBy?$location.path("reports/mgmt_date_pdf"):"inspector"===$scope.groupBy?$location.path("reports/mgmt_inspector_pdf"):"regulatory"===$scope.groupBy&&$location.path("reports/mgmt_framework_pdf")}},$scope.saveAs=function(){if($scope.isFormValid()){var modalInstance=$modal.open({controller:"SaveMgmtModalController",templateUrl:"modules/reports/views/modal.save.report.html",resolve:{}});modalInstance.result.then(function(modalResult){$scope.report.name=modalResult.name,$scope.report.description=modalResult.description,$scope.saveReport()},function(){console.log("Modal dismissed at: "+new Date)})}},$scope.saveReport=function(){if($scope.isSuperAdmin?$scope.report.company=$scope.data.company._id:$scope.report.company=$scope.data.company,$scope.report.checklist=$scope.data.checklist._id,$scope.report.inspectors=[],$scope.selInspectors)for(i=0;i<$scope.selInspectors.length;i++)$scope.report.inspectors.push($scope.selInspectors[i].id);if($scope.report.regulatories=[],$scope.selRegulatories)for(var j=0;j<$scope.selRegulatories.length;j++)$scope.report.regulatories.push($scope.selRegulatories[j].id);$scope.report.fromDate=$scope.startDate,$scope.report.toDate=$scope.endDate,$scope.report.groupBy=$scope.groupBy,$scope.report.type="management",$scope.report.updated=$scope.lastUpdated=moment(),$scope.report.editor=$scope.authentication.user._id,console.log("saving: ",$scope.report),$scope.report._id?$scope.report.$update(function(){console.log("saved: ",$scope.report),$rootScope.activeReportTab="saved",$location.path("reports")},function(errorResponse){errorResponse.data&&($scope.error=errorResponse.data.message)}):$scope.report.$save(function(){console.log("saved: ",$scope.report),$rootScope.activeReportTab="saved",$location.path("reports")},function(errorResponse){errorResponse.data&&($scope.error=errorResponse.data.message)})},$scope.cancel=function(){$location.path("reports")}}]),angular.module("reports").controller("RegReportsBuildController",["$scope","$rootScope","$stateParams","$modal","$location","Authentication","Companies","ChecklistsByCompany","InspectorsByCompany","RegulatoriesByCompany","Reports","UserRole","InspectorsByChecklist","ReportData","Checklists",function($scope,$rootScope,$stateParams,$modal,$location,Authentication,Companies,ChecklistsByCompany,InspectorsByCompany,RegulatoriesByCompany,Reports,UserRole,InspectorsByChecklist,ReportData,Checklists){var i;$scope.initialize=function(){$scope.userRoles=["superadmin","administrator","supervisor"],$scope.authentication=Authentication,$scope.isSuperAdmin=Authentication.user.role===UserRole.Superadmin,$scope.userRoles.indexOf(Authentication.user.role)<0&&$location.path("/"),$scope.data={},$scope.breadcrumbLabel=$scope.reportName="Regulatory Report",$scope.find(),$scope.multiselectSettings1={showCheckAll:!1,showUncheckAll:!1,displayProp:"displayName",idProp:"_id",smartButtonMaxItems:3,smartButtonTextConverter:function(itemText,originalItem){return itemText}},$scope.multiselectSettings2={showCheckAll:!1,showUncheckAll:!1,displayProp:"name",idProp:"_id",smartButtonMaxItems:3,smartButtonTextConverter:function(itemText,originalItem){return itemText}},$scope.dateInputFormat="MM/dd/yyyy",$scope.dateOptions={formatYear:"yy",startingDay:1},$scope.datePickerOpened={startDate:!1,endDate:!1},$scope.startDate=moment().subtract(90,"days").format("MM/DD/YYYY"),$scope.endDate=moment().format("MM/DD/YYYY"),$scope.initializeReport()},$scope.find=function(){$scope.inspectors=[],$scope.selInspectors=[],$scope.regulatories=[],$scope.selRegulatories=[],$scope.isSuperAdmin?$scope.companies=Companies.query():$scope.data.company=Authentication.user.company},$scope.initializeReport=function(){$scope.initializing=!0,$stateParams.reportId?($scope.report=Reports.get({reportId:$stateParams.reportId}),$scope.report.$promise.then(function(result){console.log("report: ",result),$scope.isSuperAdmin?$scope.data.company=result.company:$scope.data.company=result.company._id,result.fromDate&&($scope.startDate=moment(result.fromDate).format("MM/DD/YYYY")),result.toDate&&($scope.endDate=moment(result.toDate).format("MM/DD/YYYY")),$scope.groupBy=result.groupBy,$scope.reportName=result.name,$scope.filterByCompany()})):($scope.report=new Reports({}),$scope.filterByCompany())},$scope.filterByChecklist=function(){$scope.data.checklist?($scope.inspectors=InspectorsByChecklist.query({checklistId:$scope.data.checklist._id}),$scope.inspectors.$promise.then(function(result){if($scope.report._id&&$scope.initializing){for(i=0;i<$scope.report.inspectors.length;i++)$scope.selInspectors.push({id:$scope.report.inspectors[i]._id});$scope.initializing=!1}else for(i=0;i<$scope.inspectors.length;i++)$scope.selInspectors.push({id:$scope.inspectors[i]._id})})):$scope.inspectors=[]},$scope.filterByCompany=function(){$scope.data.checklist=null,$scope.site="",$scope.data.checklist="",$scope.checklists=[],$scope.inspectors=[],$scope.selInspectors=[],$scope.regulatories=[],$scope.selRegulatories=[],$scope.data.company?($scope.isSuperAdmin?$scope.selectedCompany=$scope.data.company._id:$scope.selectedCompany=Authentication.user.company,$scope.checklists=ChecklistsByCompany.query({companyId:$scope.selectedCompany}),$scope.regulatories=RegulatoriesByCompany.query({companyId:$scope.selectedCompany}),$scope.regulatories.$promise.then(function(result){if($scope.report._id&&$scope.initializing){for(i=0;i<$scope.report.regulatories.length;i++)$scope.selRegulatories.push({id:$scope.report.regulatories[i]._id});$scope.data.checklist=Checklists.get({checklistId:$scope.report.checklist._id}),$scope.data.checklist.$promise.then(function(checklistResult){for($scope.filterByChecklist(),i=0;i<$scope.checklists.length;i++)$scope.checklists[i]._id==$scope.data.checklist._id&&($scope.data.checklist=$scope.checklists[i])})}else for(i=0;i<$scope.regulatories.length;i++)$scope.selRegulatories.push({id:$scope.regulatories[i]._id})})):$scope.selectedCompany="none"},$scope.onInspectorSelected=function(){console.log($scope.selInspectors)},$scope.onRegulatorySelected=function(){},$scope.openDatePicker=function($event,picker){$event.preventDefault(),$event.stopPropagation();for(var key in $scope.datePickerOpened)$scope.datePickerOpened.hasOwnProperty(key)&&($scope.datePickerOpened[key]=!1);$scope.datePickerOpened[picker]=!0},$scope.isFormValid=function(){return $scope.isSuperAdmin&&!$scope.data.company?($scope.error="Please select company.",!1):$scope.data.checklist?$scope.selInspectors?$scope.selRegulatories?$scope.groupBy?new Date($scope.startDate)>new Date($scope.endDate)?($scope.error="Please select appropriate date range.",!1):($scope.error=null,!0):($scope.error="Please select group option.",!1):($scope.error="Please select at least 1 regulatory framework.",!1):($scope.error="Please select at least 1 inspector.",!1):($scope.error="Please select checklist.",!1)},$scope.generateReport=function(){if($scope.isFormValid()){$scope.isSuperAdmin?ReportData.company=$scope.data.company._id:ReportData.company=$scope.data.company,ReportData.checklist=$scope.data.checklist._id;var i,j,selectedInspectors=[],selectedRegulatories=[];for(i=0;i<$scope.inspectors.length;i++)for(j=0;j<$scope.selInspectors.length;j++)$scope.inspectors[i]._id===$scope.selInspectors[j].id&&selectedInspectors.push($scope.inspectors[i]);for(i=0;i<$scope.regulatories.length;i++)for(j=0;j<$scope.selRegulatories.length;j++)$scope.regulatories[i]._id===$scope.selRegulatories[j].id&&selectedRegulatories.push($scope.regulatories[i]);ReportData.inspectors=selectedInspectors,ReportData.frameworks=selectedRegulatories,ReportData.fromDate=moment($scope.startDate),ReportData.toDate=moment($scope.endDate),ReportData.groupBy=$scope.groupBy,"date"===$scope.groupBy?$location.path("reports/reg_date_pdf"):"inspector"===$scope.groupBy?$location.path("reports/reg_inspector_pdf"):"regulatory"===$scope.groupBy&&$location.path("reports/reg_framework_pdf")}},$scope.saveAs=function(){if($scope.isFormValid()){var modalInstance=$modal.open({controller:"SaveMgmtModalController",templateUrl:"modules/reports/views/modal.save.report.html",resolve:{}});modalInstance.result.then(function(modalResult){$scope.report.name=modalResult.name,$scope.report.description=modalResult.description,$scope.saveReport()},function(){console.log("Modal dismissed at: "+new Date)})}},$scope.saveReport=function(){if($scope.isSuperAdmin?$scope.report.company=$scope.data.company._id:$scope.report.company=$scope.data.company,$scope.report.checklist=$scope.data.checklist._id,$scope.report.inspectors=[],$scope.selInspectors)for(i=0;i<$scope.selInspectors.length;i++)$scope.report.inspectors.push($scope.selInspectors[i].id);if($scope.report.regulatories=[],$scope.selRegulatories)for(var j=0;j<$scope.selRegulatories.length;j++)$scope.report.regulatories.push($scope.selRegulatories[j].id);$scope.report.fromDate=$scope.startDate,$scope.report.toDate=$scope.endDate,$scope.report.groupBy=$scope.groupBy,$scope.report.type="regulatory",$scope.report.updated=$scope.lastUpdated=moment(),$scope.report.editor=$scope.authentication.user._id,console.log("saving: ",$scope.report),$scope.report._id?$scope.report.$update(function(){console.log("saved: ",$scope.report),$rootScope.activeReportTab="saved",$location.path("reports")},function(errorResponse){errorResponse.data&&($scope.error=errorResponse.data.message)}):$scope.report.$save(function(){console.log("saved: ",$scope.report),$rootScope.activeReportTab="saved",$location.path("reports")},function(errorResponse){errorResponse.data&&($scope.error=errorResponse.data.message)})},$scope.cancel=function(){$location.path("reports")}}]),angular.module("reports").controller("SaveMgmtModalController",["$scope","$modalInstance",function($scope,$modalInstance){$scope.ok=function(){$modalInstance.close($scope.data)},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]).controller("SaveInspModalController",["$scope","$modalInstance",function($scope,$modalInstance){$scope.ok=function(){$modalInstance.close("ok")},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]).controller("ReportsCopyModalController",["$scope","$modalInstance","reports",function($scope,$modalInstance,reports){$scope.reports=reports,$scope.ok=function(){$modalInstance.close("ok")},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]).controller("ReportDeleteModalCtrl",["$scope","$modalInstance","reports",function($scope,$modalInstance,reports){$scope.reports=reports,$scope.ok=function(){$modalInstance.close("ok")},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]),angular.module("reports").controller("DatePdfController",["$scope","$timeout","$location","$anchorScroll","ReportData","Authentication","InspectionReports","Checklists",function($scope,$timeout,$location,$anchorScroll,ReportData,Authentication,InspectionReports,Checklists){$scope.isArray=angular.isArray,$scope.initialize=function(){$scope.moment=moment;var i;$scope.inspectors=[],$scope.frameworks=[],console.log(ReportData.inspectors);for(i in ReportData.inspectors)$scope.inspectors.push(ReportData.inspectors[i]._id);for(i in ReportData.frameworks)$scope.frameworks.push(ReportData.frameworks[i]._id);var params={company:ReportData.company,checklist:ReportData.checklist,inspectors:$scope.inspectors,frameworks:$scope.frameworks,fromDate:moment(ReportData.fromDate).format("MM/DD/YYYY"),toDate:moment(ReportData.toDate).format("MM/DD/YYYY"),sortBy:"date"};$scope.checklist=Checklists.get({checklistId:ReportData.checklist}),$scope.inspections=InspectionReports.query(params),$scope.inspections.$promise.then(function(response){console.log("inspections: ",response),$scope.inspectors=ReportData.inspectors,$scope.frameworks=ReportData.frameworks,$scope.fetchPictures()});var nowDate=moment().tz("America/New_York");$scope.currentDate=nowDate.format("MM/DD/YYYY HH:mm z"),$scope.fromDate=moment(ReportData.fromDate).format("MM/DD/YYYY"),$scope.toDate=moment(ReportData.toDate).format("MM/DD/YYYY")},$scope.fetchPictures=function(){$scope.pictures=[];for(var i=0;i<$scope.inspections.length;i++)for(var inspection=$scope.inspections[i],j=0;j<inspection.answers.length;j++){var answer=inspection.answers[j];if(answer.data&&answer.data.data.pictureURL){var pictures=[].concat(answer.data.data.pictureURL);angular.forEach(pictures,function(picture,index){$scope.pictures.push({inspection:i,answer:j,pictureIndex:index,url:picture})})}}},$scope.isString=function(obj){return"string"==typeof obj},$scope.gotoPicture=function(inspectionIndex,answerIndex,picIndex){$location.hash("picture_"+inspectionIndex+"_"+answerIndex+"_"+picIndex),$anchorScroll()},$scope.generateLocationString=function(location){return location?JSON.stringify(location):""},$scope.getRegulatoryFrameworkString=function(regulatory_framework){var str_list=[];if(regulatory_framework)for(var i=0;i<regulatory_framework.length;i++)str_list.indexOf(regulatory_framework[i].name)<0&&str_list.push(regulatory_framework[i].name);if(str_list.length>0){var str="("+str_list.join()+")";return str}return"(Non-regulatory)"},$scope.getFileName=function(path){var nameIndex=path.lastIndexOf("."),filename=nameIndex<0?"":path.substr(nameIndex);return filename}}]),angular.module("reports").controller("FrameworkPdfController",["$scope","$timeout","$location","$anchorScroll","ReportData","Authentication","InspectionReports","Checklists",function($scope,$timeout,$location,$anchorScroll,ReportData,Authentication,InspectionReports,Checklists){$scope.initialize=function(){$scope.moment=moment;var i;$scope.inspectors=[],$scope.frameworks=[],console.log(ReportData.inspectors);for(i in ReportData.inspectors)$scope.inspectors.push(ReportData.inspectors[i]._id);for(i in ReportData.frameworks)$scope.frameworks.push(ReportData.frameworks[i]._id);var params={company:ReportData.company,checklist:ReportData.checklist,inspectors:$scope.inspectors,frameworks:$scope.frameworks,fromDate:moment(ReportData.fromDate).format("MM/DD/YYYY"),
toDate:moment(ReportData.toDate).format("MM/DD/YYYY"),sortBy:"framework"};$scope.checklist=Checklists.get({checklistId:ReportData.checklist}),$scope.checklist.$promise.then(function(response){console.log("checklist: ",$scope.checklist);var currentFramework="";for($scope.questionGroups={none:[]},i=0;i<$scope.checklist.questions.length;i++)$scope.checklist.questions[i].question.regulatory?($scope.checklist.questions[i].question.regulatory_framework=[].concat($scope.checklist.questions[i].question.regulatory_framework||[]),angular.forEach($scope.checklist.questions[i].question.regulatory_framework,function(framework){currentFramework=framework._id,$scope.questionGroups[currentFramework]?$scope.questionGroups[currentFramework].push($scope.checklist.questions[i]):$scope.questionGroups[currentFramework]=[$scope.checklist.questions[i]]})):$scope.questionGroups.none.push($scope.checklist.questions[i]);0===$scope.questionGroups.none.length&&delete $scope.questionGroups.none,$scope.inspections=InspectionReports.query(params),$scope.inspections.$promise.then(function(response){for(console.log("inspections: ",response),$scope.fetchPictures(),i=0;i<$scope.inspections.length;i++){$scope.inspections[i].orderedAnswers=[];for(var j=0;j<$scope.checklist.questions.length;j++)for(var k=0;k<$scope.inspections[i].answers.length;k++)$scope.checklist.questions[j].question._id===$scope.inspections[i].answers[k].question._id&&$scope.inspections[i].orderedAnswers.push($scope.inspections[i].answers[k])}$scope.inspectors=ReportData.inspectors,$scope.frameworks=ReportData.frameworks,$timeout(function(){})})});var nowDate=moment().tz("America/New_York");$scope.currentDate=nowDate.format("MM/DD/YYYY HH:mm z"),$scope.fromDate=moment(ReportData.fromDate).format("MM/DD/YYYY"),$scope.toDate=moment(ReportData.toDate).format("MM/DD/YYYY")},$scope.fetchPictures=function(){$scope.pictures=[];for(var i=0;i<$scope.inspections.length;i++)for(var inspection=$scope.inspections[i],j=0;j<inspection.answers.length;j++){var answer=inspection.answers[j];if(answer.data&&answer.data.data.pictureURL){var pictures=[].concat(answer.data.data.pictureURL);angular.forEach(pictures,function(picture,index){$scope.pictures.push({inspection:i,answer:j,pictureIndex:index,url:picture})})}}},$scope.isString=function(obj){return"string"==typeof obj},$scope.gotoPicture=function(inspectionIndex,answerIndex,picIndex){$location.hash("picture_"+inspectionIndex+"_"+answerIndex+"_"+picIndex),$anchorScroll()},$scope.generateLocationString=function(location){return JSON.stringify(location)},$scope.getRegulatoryFrameworkString=function(regulatory_framework){var str_list=[];if(regulatory_framework)for(var i=0;i<regulatory_framework.length;i++)str_list.indexOf(regulatory_framework[i].name)<0&&str_list.push(regulatory_framework[i].name);if(str_list.length>0){var str="("+str_list.join()+")";return str}return""},$scope.getFileName=function(path){var nameIndex=path.lastIndexOf("."),filename=nameIndex<0?"":path.substr(nameIndex);return filename}}]),angular.module("reports").controller("InspectorPdfController",["$scope","$timeout","$location","$anchorScroll","ReportData","Authentication","InspectionReports","Checklists",function($scope,$timeout,$location,$anchorScroll,ReportData,Authentication,InspectionReports,Checklists){$scope.isArray=angular.isArray,$scope.initialize=function(){$scope.moment=moment;var i;$scope.inspectors=[],$scope.frameworks=[],console.log(ReportData.inspectors);for(i in ReportData.inspectors)$scope.inspectors.push(ReportData.inspectors[i]._id);for(i in ReportData.frameworks)$scope.frameworks.push(ReportData.frameworks[i]._id);var params={company:ReportData.company,checklist:ReportData.checklist,inspectors:$scope.inspectors,frameworks:$scope.frameworks,fromDate:moment(ReportData.fromDate).format("MM/DD/YYYY"),toDate:moment(ReportData.toDate).format("MM/DD/YYYY"),sortBy:"editor"};$scope.checklist=Checklists.get({checklistId:ReportData.checklist}),$scope.checklist.$promise.then(function(response){console.log("checklist: ",$scope.checklist)}),$scope.inspections=InspectionReports.query(params),$scope.inspections.$promise.then(function(response){console.log("inspections: ",response),$scope.inspectionGroups={};var currentUser=null;for(i=0;i<$scope.inspections.length;i++)currentUser===$scope.inspections[i].editor._id?$scope.inspectionGroups[currentUser].push($scope.inspections[i]):(currentUser=$scope.inspections[i].editor._id,$scope.inspectionGroups[currentUser]=[$scope.inspections[i]]);var arr=[];angular.forEach($scope.inspectionGroups,function(value,key){arr.push(value)}),$scope.inspectionGroups=arr,$scope.fetchPictures(),$scope.inspectors=ReportData.inspectors,$scope.frameworks=ReportData.frameworks,$timeout(function(){})});var nowDate=moment().tz("America/New_York");$scope.currentDate=nowDate.format("MM/DD/YYYY HH:mm z"),$scope.fromDate=moment(ReportData.fromDate).format("MM/DD/YYYY"),$scope.toDate=moment(ReportData.toDate).format("MM/DD/YYYY")},$scope.fetchPictures=function(){$scope.pictures=[];for(var k=0;k<$scope.inspectionGroups.length;k++)for(var inspections=$scope.inspectionGroups[k],i=0;i<inspections.length;i++)for(var inspection=inspections[i],j=0;j<inspection.answers.length;j++){var answer=inspection.answers[j];if(answer.data&&answer.data.data.pictureURL){var pictures=[].concat(answer.data.data.pictureURL);angular.forEach(pictures,function(picture,index){$scope.pictures.push({inspectionGroup:k,inspection:i,answer:j,pictureIndex:index,url:picture})})}}},$scope.isString=function(obj){return"string"==typeof obj},$scope.gotoPicture=function(inspectGroupIdx,inspectionIndex,answerIndex,picIndex){$location.hash("picture_"+inspectGroupIdx+"_"+inspectionIndex+"_"+answerIndex+"_"+picIndex),$anchorScroll()},$scope.generateLocationString=function(location){return JSON.stringify(location)},$scope.getRegulatoryFrameworkString=function(regulatory_framework){var str_list=[];if(regulatory_framework)for(var i=0;i<regulatory_framework.length;i++)str_list.indexOf(regulatory_framework[i].name)<0&&str_list.push(regulatory_framework[i].name);if(str_list.length>0){var str="("+str_list.join()+")";return str}return"(Non-regulatory)"},$scope.getFileName=function(path){var nameIndex=path.lastIndexOf("."),filename=nameIndex<0?"":path.substr(nameIndex);return filename}}]),angular.module("reports").controller("ReportsController",["$scope","$rootScope","$location","$modal","Authentication","Companies","Reports","ReportsByCompany","Checklists","ChecklistsByCompany","UserRole","CompaniesForReports","ChecklistsForReports","SitesByCompany","VisDataSet","$http","InspectionDates","FrequenciesByCompany","$q","$filter",function($scope,$rootScope,$location,$modal,Authentication,Companies,Reports,ReportsByCompany,Checklists,ChecklistsByCompany,UserRole,CompaniesForReports,ChecklistsForReports,SitesByCompany,VisDataSet,$http,InspectionDates,FrequenciesByCompany,$q,$filter){$scope.initialize=function(){$scope.userRoles=["superadmin","administrator","supervisor"],$scope.authentication=Authentication,$scope.isSuperAdmin=Authentication.user.role===UserRole.Superadmin,$scope.userRoles.indexOf(Authentication.user.role)<0&&$location.path("/"),$scope.multiselectSettings={showCheckAll:!0,showUncheckAll:!0,displayProp:"name",idProp:"_id",smartButtonMaxItems:3,smartButtonTextConverter:function(itemText,originalItem){return itemText}},$scope.textSettings={checkAll:"Select All",uncheckAll:"Deselect All"},$scope.activeTab=$rootScope.activeReportTab||"basic",$rootScope.activeReportTab="",$scope.filters={company:$rootScope.report_filter_company||""},$scope.timelineFilters={company:"",site:"",frequencies:[]},$rootScope.report_filter_company="",$scope.orderCriterion=$rootScope.report_orderCriterion||"updated",$rootScope.report_orderCriterion="",$rootScope.report_orderReverse===!1?$scope.orderReverse=!1:$scope.orderReverse=!0,$rootScope.report_orderReverse="",$scope.isSuperAdmin&&($scope.companies=CompaniesForReports.query(),$scope.companies.$promise.then(function(response){}));var defaultCompany="all";Authentication.user.role===UserRole.Administrator&&(defaultCompany=Authentication.user.company),$scope.selectedCompany=$rootScope.report_selectedCompany||defaultCompany,$scope.selectedCompanyForTimeline=$scope.selectedCompany,$scope.sites=[],"all"!=$scope.selectedCompanyForTimeline&&($scope.sites=SitesByCompany.query({companyId:$scope.selectedCompanyForTimeline})),$rootScope.report_selectedCompany="",$scope.find()},$scope.find=function(){"all"===$scope.selectedCompany?($scope.reports=Reports.query(),$scope.checklists=ChecklistsForReports.query({companyId:"all"})):($scope.reports=ReportsByCompany.query({companyId:$scope.selectedCompany}),$scope.checklists=ChecklistsForReports.query({companyId:$scope.selectedCompany})),$scope.reports.$promise.then(function(result){$scope.filterReports()}),$scope.checklists.$promise.then(function(result){$scope.filters.checklist=$rootScope.report_filter_checklist||"",$rootScope.report_filter_checklist="",$scope.filterReports()})},$scope.findOne=function(id){$scope.report=Reports.get({reportId:id})},$scope.openReport=function(report){$rootScope.report_filter_company=$scope.filters.company,$rootScope.report_filter_checklist=$scope.filters.checklist,$rootScope.report_orderReverse=$scope.orderReverse,$rootScope.report_orderCriterion=$scope.orderCriterion,$rootScope.report_selectedCompany=$scope.selectedCompany,"management"===report.type?$location.path("/reports/management_inspection/"+report._id+"/edit"):$location.path("/reports/regulatory_inspection/"+report._id+"/edit")},$scope.copyReport=function(originalReport){var report=new Reports({});if(report.name="Copy of "+originalReport.name,report.company=originalReport.company._id,report.checklist=originalReport.checklist._id,report.inspectors=[],originalReport.inspectors)for(var i=0;i<originalReport.inspectors.length;i++)report.inspectors.push(originalReport.inspectors[i]._id);if(report.regulatories=[],$scope.selRegulatories)for(var j=0;j<originalReport.regulatories.length;j++)report.regulatories.push(originalReport.regulatories[j]._id);report.fromDate=originalReport.fromDate,report.toDate=originalReport.toDate,report.groupBy=originalReport.groupBy,report.type=originalReport.type,report.description=originalReport.description,report.editor=Authentication.user._id,report.updated=moment(),report.$save(function(){report.company=originalReport.company,$scope.reports.push(report),$scope.filterReports()},function(error){console.log(error)})},$scope.copyReports=function(){for(var selectedReports=[],i=0;i<$scope.reports.length;i++)$scope.reports[i].isChecked&&selectedReports.push($scope.reports[i]);if(0!==selectedReports.length){var modalInstance=$modal.open({controller:"ReportsCopyModalController",templateUrl:"modules/reports/views/modal.copy.report.html",resolve:{reports:function(){return selectedReports}}});modalInstance.result.then(function(modalResult){for(var i=0;i<$scope.reports.length;i++)$scope.reports[i].isChecked&&($scope.copyReport($scope.reports[i]),$scope.reports[i].isChecked=!1)},function(){console.log("Modal dismissed at: "+new Date)})}},$scope.deleteReports=function(){for(var selectedReports=[],i=0;i<$scope.reports.length;i++)$scope.reports[i].isChecked&&selectedReports.push($scope.reports[i]);if(0!==selectedReports.length){var modalInstance=$modal.open({controller:"ReportDeleteModalCtrl",templateUrl:"modules/reports/views/modal.delete.report.html",resolve:{reports:function(){return selectedReports}}});modalInstance.result.then(function(modalResult){for(var i=$scope.reports.length;i--;)$scope.reports[i].isChecked&&(Reports.delete({reportId:$scope.reports[i]._id}),$scope.reports.splice(i,1));$scope.filterReports(),console.log("after deletion: ",$scope.reports)},function(){console.log("Modal dismissed at: "+new Date)})}},$scope.generateDate=function(dateStr){return moment(dateStr).tz("America/New_York").format("MM/DD/YYYY HH:mm a")},$scope.filterByCompany=function(){$scope.filters.company?$scope.selectedCompany=$scope.filters.company._id:$scope.selectedCompany="all",$scope.find()},$scope.filterSitesByCompany=function(){$scope.availableFrequencies=[],$scope.timelineFilters.frequencies=[],$scope.timelineFilters.company?($scope.selectedCompanyForTimeline=$scope.timelineFilters.company._id,$scope.isSuperAdmin?$scope.selectedCompanyForTimeline=$scope.timelineFilters.company._id:$scope.selectedCompanyForTimeline=$scope.timelineFilters.company,$scope.sites=SitesByCompany.query({companyId:$scope.selectedCompanyForTimeline})):($scope.selectedCompanyForTimeline="all",$scope.sites=[])},$scope.filterReports=function(){$scope.filteredReports=[],$scope.types=[];for(var isMgmtExist=!1,isRegExist=!1,i=0;i<$scope.reports.length;i++)"management"===$scope.reports[i].type?isMgmtExist=!0:"regulatory"===$scope.reports[i].type&&(isRegExist=!0),void 0!==$scope.filters.type&&$scope.filters.type&&$scope.reports[i].type!==$scope.filters.type.value||void 0!==$scope.filters.checklist&&$scope.filters.checklist&&$scope.reports[i].checklist._id!==$scope.filters.checklist._id||$scope.filteredReports.push($scope.reports[i]);isMgmtExist&&$scope.types.push({value:"management",text:"Management Inspection Data Report"}),isRegExist&&$scope.types.push({value:"regulatory",text:"Regulatory Inspection Data Report"})},$scope.sortBy=function(criterion){$scope.orderCriterion===criterion?$scope.orderReverse=!$scope.orderReverse:("updated"===criterion?$scope.orderReverse=!0:$scope.orderReverse=!1,$scope.orderCriterion=criterion)},$scope.getInspectionDate=function(checklistId,index){var q=$q.defer(),latestInspection=InspectionDates.query({checklistId:checklistId,isSubmitted:1,fetch:"all"});return latestInspection.$promise.then(function(response){if(0==response.length)$scope.checklists[index].inspectionDates=[moment(new Date).format("MM/DD/YYYY")];else{response.sort(function(a,b){return new Date(b.date)-new Date(a.date)}),$scope.checklists[index].inspectionDates=[],angular.forEach(response,function(item){$scope.checklists[index].inspectionDates.indexOf(moment(item.date).format("MM/DD/YYYY"))<0&&$scope.checklists[index].inspectionDates.push(moment(item.date).format("MM/DD/YYYY"))});var item=response[0];if(item.dueDates&&item.dueDates.length>0)for(var j=0;j<item.dueDates.length;j++)$scope.checklists[index].inspectionDates.indexOf(moment(item.dueDates[j]).format("MM/DD/YYYY"))<0&&$scope.checklists[index].inspectionDates.push(moment(item.dueDates[j]).format("MM/DD/YYYY"))}q.resolve(response)}),q.promise},$scope.fetchChecklists=function(){var date=new Date;if($scope.startRangeDate=new Date,$scope.endRangeDate=new Date(date.setMonth(date.getMonth()+3)),$scope.timeline_data={items:VisDataSet([])},$scope.safe_inspection_items=$scope.inspection_items=[],$scope.timelineFilters.site){var data={site:$scope.timelineFilters.site._id,frequencies:[],isAll:!0};$http.post("/checklists/bySiteAndFrequencies",data).success(function(response){$scope.availableFrequencies=[],$scope.timelineFilters.frequencies=[],angular.forEach(response,function(item){if(item.frequency){var tmp=$scope.availableFrequencies.filter(function(d){return d._id==item.frequency._id});0==tmp.length&&($scope.availableFrequencies.push(item.frequency),$scope.timelineFilters.frequencies.push({id:item.frequency._id}))}}),$scope.checklists=response;for(var qLists=[],i=0;i<response.length;i++)qLists.push($scope.getInspectionDate(response[i]._id,i));$q.all(qLists).then(function(values){$scope.inspection_items=[];var idx=0;angular.forEach($scope.checklists,function(item,checklist_index){angular.forEach(item.inspectionDates,function(d,index){idx++,$scope.inspection_items.push({id:idx,name:item.name,content:"<b>"+item.name+"</b><br>"+item.frequency.name+"<br>"+d,start:new Date(d),site:item.site.name,frequency:item.frequency.name,editor:item.editor.displayName})})}),$scope.inspection_items=$filter("orderBy")($scope.inspection_items,["+start"]),$scope.safe_inspection_items=$scope.inspection_items,$scope.timeline_data={items:VisDataSet($scope.inspection_items)}})}).error(function(response){console.log("login error: ",response),$scope.error=response.message})}},$scope.fetchChecklistsByFrequency=function(){var date=new Date;if($scope.startRangeDate=new Date,$scope.endRangeDate=new Date(date.setMonth(date.getMonth()+3)),$scope.timeline_data={items:VisDataSet([])},$scope.safe_inspection_items=$scope.inspection_items=[],$scope.timelineFilters.site){var data={site:$scope.timelineFilters.site._id,frequencies:$scope.timelineFilters.frequencies};$http.post("/checklists/bySiteAndFrequencies",data).success(function(response){$scope.checklists=response;for(var qLists=[],i=0;i<response.length;i++)qLists.push($scope.getInspectionDate(response[i]._id,i));$q.all(qLists).then(function(values){$scope.inspection_items=[];var idx=0;angular.forEach($scope.checklists,function(item,checklist_index){angular.forEach(item.inspectionDates,function(d,index){idx++,$scope.inspection_items.push({id:idx,name:item.name,content:"<b>"+item.name+"</b><br>"+item.frequency.name+"<br>"+d,start:new Date(d),site:item.site.name,frequency:item.frequency.name,editor:item.editor.displayName})})}),$scope.inspection_items=$filter("orderBy")($scope.inspection_items,["+start"]),$scope.safe_inspection_items=$scope.inspection_items,$scope.timeline_data={items:VisDataSet($scope.inspection_items)}})}).error(function(response){console.log("login error: ",response),$scope.error=response.message})}},$scope.onRangeChange=function(event){$scope.startRangeDate=event.start,$scope.endRangeDate=event.end,$scope.$apply()},$scope.onSelectInspection=function(obj){$scope.inspection_items.map(function(item){item.id===obj.items[0]?item.selected=!0:item.selected=!1}),$scope.$apply()},$scope.events={rangechanged:$scope.onRangeChange,select:$scope.onSelectInspection};var date=new Date;$scope.startRangeDate=new Date,$scope.endRangeDate=new Date(date.setMonth(date.getMonth()+3));var minDate=new Date,maxDate=new Date;$scope.options={align:"center",autoResize:!0,editable:!1,selectable:!0,orientation:"bottom",showCurrentTime:!0,showMajorLabels:!0,showMinorLabels:!0,start:$scope.startRangeDate,end:$scope.endRangeDate,min:minDate.setMonth(minDate.getMonth()-3),max:maxDate.setFullYear(maxDate.getFullYear()+1)}}]),angular.module("reports").factory("Reports",["$resource",function($resource){return $resource("reports/:reportId",{reportId:"@_id"},{update:{method:"PUT"}})}]).factory("ReportsByCompany",["$resource",function($resource){return $resource("reports/company/:companyId",{companyId:"@companyId"})}]).factory("CompaniesForReports",["$resource",function($resource){return $resource("reports/companies")}]).factory("ChecklistsForReports",["$resource",function($resource){return $resource("reports/checklists",{})}]).factory("InspectionReports",["$resource",function($resource){return $resource("reports/inspections")}]).service("ReportData",function(){return{company:null,checklist:null,inspectors:[],frameworks:[],fromDate:null,toDate:null}}).filter("timelineDatRange",function(){return function(items,from,to){var result=[];if(items)for(var i=0;i<items.length;i++){var d=new Date(items[i].start);d>=new Date(from)&&d<=new Date(to)&&result.push(items[i])}return result}}),angular.module("sites").run(["Menus",function(Menus){Menus.addSubMenuItem("topbar","admin","Sites","sites",null,!0,["superadmin","administrator"],2)}]),angular.module("sites").config(["$stateProvider",function($stateProvider){$stateProvider.state("sites-list",{url:"/sites",templateUrl:"modules/sites/views/list-sites.client.view.html"}).state("site-create",{url:"/sites/new",templateUrl:"modules/sites/views/create-site.client.view.html"}).state("site-detail",{url:"/sites/:siteId/edit",templateUrl:"modules/sites/views/create-site.client.view.html"})}]),angular.module("sites").controller("SiteCreateController",["$scope","$stateParams","$location","Authentication","Companies","Sites","SiteSrv","UserRole",function($scope,$stateParams,$location,Authentication,Companies,Sites,SiteSrv,UserRole){$scope.initialize=function(){$scope.userRoles=["superadmin","administrator"],$scope.authentication=Authentication,$scope.userRoles.indexOf(Authentication.user.role)<0&&$location.path("/"),$scope.isSuperAdmin=Authentication.user.role===UserRole.Superadmin,$scope.data={},$stateParams.siteId?$scope.findOne($stateParams.siteId):($scope.site=new Sites({name:"",status:!0}),$scope.isSuperAdmin||($scope.site.company=Authentication.user.company),$scope.breadcrumbLabel="New Site",$scope.reset()),$scope.companies=Companies.query()},$scope.findOne=function(id){$scope.site=Sites.get({siteId:id}),$scope.site.$promise.then(function(response){"administrator"===$scope.authentication.user.role&&($scope.site.company._id!==$scope.authentication.user.company&&$location.path("/"),$scope.site.company=$scope.site.company._id),$scope.breadcrumbLabel="Site Details ["+$scope.site.name+"]",$scope.reset()})},$scope.isFormValid=function(){return $scope.isSuperAdmin&&!$scope.data.company?$scope.error="Please select company.":$scope.siteName&&$scope.siteName.length?$scope.error=null:$scope.error="Please fill in site name.",!$scope.error},$scope.save=function(){$scope.isFormValid()&&($scope.site.updated=$scope.lastUpdated=moment(),$scope.site.name=$scope.siteName,$scope.isSuperAdmin&&($scope.site.company=$scope.data.company._id),$scope.site.status="true"===$scope.status,$scope.site.editor=$scope.authentication.user._id,$scope.site._id?$scope.site.$update(function(response){$location.path("sites")},function(errorResponse){errorResponse.data&&($scope.error=errorResponse.data.message)}):$scope.site.$save(function(response){$location.path("sites")},function(errorResponse){errorResponse.data&&($scope.error=errorResponse.data.message)}))},$scope.reset=function(){$scope.data.company=$scope.site.company,$scope.siteName=$scope.site.name,$scope.status=$scope.site.status?"true":"false",$scope.lastUpdated=moment($scope.site.updated).tz("America/New_York"),$scope.site.editor?$scope.editor=" by ["+$scope.site.editor.username+"]":$scope.editor=""},$scope.cancel=function(){$location.path("sites")}}]),angular.module("sites").controller("SitesController",["$scope","$http","$stateParams","$location","Authentication","Companies","Sites","SiteSrv","UserRole","SitesByCompany","PersistSortService",function($scope,$http,$stateParams,$location,Authentication,Companies,Sites,SiteSrv,UserRole,SitesByCompany,PersistSortService){$scope.userRoles=["superadmin","administrator"],$scope.authentication=Authentication,$scope.isSuperAdmin=Authentication.user.role===UserRole.Superadmin,$scope.isHideInactivate=!0,$scope.lastUpdated=moment().tz("America/New_York"),$scope.sortColumn={name:!0,company:!1,status:!1},$scope.persistSort=function(item){1==$scope.sortColumn[item]?($scope.sortColumn={name:!1,company:!1,status:!1},$scope.sortColumn[item]="reverse"):0==$scope.sortColumn[item]?($scope.sortColumn={name:!1,company:!1,status:!1},$scope.sortColumn[item]=!0):"reverse"==$scope.sortColumn[item]&&($scope.sortColumn={name:!1,company:!1,status:!1},$scope.sortColumn[item]=!1),PersistSortService.set("site_sort",$scope.sortColumn)},$scope.create=function(){$location.path("sites/new")},$scope.find=function(){PersistSortService.get("site_sort")&&($scope.sortColumn=PersistSortService.get("site_sort")),$scope.userRoles.indexOf(Authentication.user.role)<0&&$location.path("/"),$scope.isSuperAdmin?$scope.findAll():$scope.findByCompany()},$scope.findAll=function(){$http.get("/sites/all").success(function(response){$scope.sites=response,$scope.safeSites=response}).error(function(response){$scope.error=response.message,console.log("error: ",response)})},$scope.findByCompany=function(){$scope.sites=$scope.safeSites=SitesByCompany.query({companyId:Authentication.user.company})},$scope.findOne=function(){$scope.site=Sites.get({siteId:$stateParams.siteId})},$scope.editSite=function(site){$location.path("sites/"+site._id+"/edit")},$scope.sortByStatus=function(row){return!row.status}}]),angular.module("sites").factory("Sites",["$resource",function($resource){return $resource("sites/:siteId",{siteId:"@_id"},{update:{method:"PUT"}})}]).factory("SitesByCompany",["$resource",function($resource){return $resource("sites/company/:companyId",{companyId:"@companyId"})}]).service("SiteSrv",function(){this.site={}}),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]).constant("UserRole",{Inspector:"inspector",Supervisor:"supervisor",Administrator:"administrator",Superadmin:"superadmin"}).run(["Menus",function(Menus){Menus.addSubMenuItem("topbar","admin","Users","users",null,!0,["superadmin","administrator"],0)}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"}).state("usersAdmin",{url:"/users",templateUrl:"modules/users/views/admin/user-admin.client.view.html"}).state("user-create",{url:"/users/new",templateUrl:"modules/users/views/admin/create-user.client.view.html"}).state("user-detail",{url:"/users/:userId/edit",templateUrl:"modules/users/views/admin/create-user.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication","Companies","UserRole",function($scope,$http,$location,Authentication,Companies,UserRole){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$scope.credentials.company=$scope.credentials.company._id,console.log("signup: ",$scope.credentials),$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){console.log("signup error: ",response),$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,console.log(response),response.role===UserRole.Inspector?$location.path("inspection"):response.role===UserRole.Supervisor?$location.path("reports"):response.role===UserRole.Administrator?$location.path("users"):response.role===UserRole.Superadmin&&$location.path("users")}).error(function(response){console.log("login error: ",response),$scope.error=response.message})},$scope.find=function(){$scope.companies=Companies.query()}}]),angular.module("users").controller("UserCreateController",["$scope","$stateParams","$http","$location","Authentication","Users","Companies","SitesByCompany","ChecklistsByCompany","SupervisorsByCompany","UserRole","$modal",function($scope,$stateParams,$http,$location,Authentication,Users,Companies,SitesByCompany,ChecklistsByCompany,SupervisorsByCompany,UserRole,$modal){$scope.initialize=function(){$scope.userRoles=["superadmin","administrator"],$scope.authentication=Authentication,$scope.isSuperAdmin=Authentication.user.role===UserRole.Superadmin,$scope.userRoles.indexOf(Authentication.user.role)<0&&$location.path("/"),$scope.data={},$stateParams.userId?$scope.findOne($stateParams.userId):($scope.user=new Users({username:"",email:"",lastName:"",firstName:"",status:!0}),$scope.isSuperAdmin||($scope.user.company=Authentication.user.company),$scope.reset(),$scope.breadcrumbLabel="New User"),$scope.supervisors=angular.copy($scope.user.supervisors),$scope.user.password||($scope.user.password=$scope.randomPassword(8)),$scope.companies=Companies.query(),$scope.sites=[],$scope.checklists=[],$scope.availableSites=[],$scope.availableChecklists=[],$scope.roles=["Inspector","Supervisor"],Authentication.user.role===UserRole.Superadmin&&$scope.roles.push("Administrator"),$scope.multiselectSettings={showCheckAll:!1,showUncheckAll:!1,displayProp:"name",idProp:"_id",smartButtonMaxItems:3,smartButtonTextConverter:function(itemText,originalItem){return itemText}}},$scope.findOne=function(id){$scope.user=Users.get({userId:id}),$scope.user.$promise.then(function(response){"administrator"===$scope.authentication.user.role&&($scope.user.company._id!==$scope.authentication.user.company&&$location.path("/"),$scope.user.company=$scope.user.company._id),$scope.breadcrumbLabel="User Details ["+$scope.user.username+"]",$scope.reset()})},$scope.getRoleValue=function(role){return UserRole[role]},$scope.isFormValid=function(){return $scope.isSuperAdmin&&!$scope.data.company?$scope.error="Please select company.":$scope.username&&$scope.username.length?$scope.firstName&&$scope.firstName.length?$scope.lastName&&$scope.lastName.length?$scope.role?$scope.email&&$scope.email.length?$scope.error=null:$scope.error="Please fill in the email.":$scope.error="Please select user role.":$scope.error="Please fill in last name.":$scope.error="Please fill in first name.":$scope.error="Please fill in the username.",!$scope.error},$scope.filterByCompany=function(company){$scope.sites=[],$scope.checklists=[],$scope.supervisors=[],$scope.data.company?($scope.isSuperAdmin?$scope.selectedCompany=$scope.data.company._id:$scope.selectedCompany=$scope.data.company,SitesByCompany.query({companyId:$scope.selectedCompany}).$promise.then(function(response){$scope.availableSites=response}),SupervisorsByCompany.query({companyId:$scope.selectedCompany}).$promise.then(function(response){$scope.supervisors=response;for(var i=0;i<$scope.supervisors.length;i++)$scope.user._id===$scope.supervisors[i]._id&&$scope.supervisors.splice(i,1)})):($scope.selectedCompany="none",$scope.availableChecklists=[],$scope.availableSites=[])},$scope.onSiteSelected=function(item){return 0===$scope.sites.length?void($scope.availableChecklists=[]):void $http.post("/checklists/bySites",$scope.sites).success(function(response){$scope.availableChecklists=response}).error(function(response){console.log("login error: ",response),$scope.error=response.message})},$scope.onChecklistSelected=function(item){},$scope.save=function(){if($scope.isFormValid()){if($scope.isSuperAdmin&&($scope.user.company=$scope.data.company._id),$scope.user.username=$scope.username,$scope.user.lastName=$scope.lastName,$scope.user.firstName=$scope.firstName,$scope.user.role=$scope.role,$scope.supervisor?$scope.user.supervisor=$scope.supervisor._id:$scope.user.supervisor=null,$scope.user.email=$scope.email,$scope.user.updated=$scope.lastUpdated=moment(),$scope.user.editor=$scope.authentication.user._id,$scope.user.sites=[],$scope.sites)for(var i=0;i<$scope.sites.length;i++)$scope.user.sites.push($scope.sites[i].id);if($scope.user.checklists=[],$scope.checklists)for(var j=0;j<$scope.checklists.length;j++)$scope.user.checklists.push($scope.checklists[j].id);$scope.user.status="true"===$scope.status,console.log("password is ",$scope.user.password),console.log("configuration: ",$scope.user),$scope.user._id?$scope.user.$update(function(response){console.log("updated: ",response),$location.path("users")},function(errorResponse){$scope.error=errorResponse.data.message}):$scope.user.$save(function(response){$location.path("users")},function(errorResponse){console.log(errorResponse),
errorResponse.data&&($scope.error=errorResponse.data.message)})}},$scope.saveSuperUser=function(){$scope.role=UserRole.Superadmin,$scope.save()},$scope.reset=function(){if(console.log($scope.user),$scope.data.company=$scope.user.company,$scope.filterByCompany(),$scope.username=$scope.user.username,$scope.lastName=$scope.user.lastName,$scope.firstName=$scope.user.firstName,$scope.role=$scope.user.role,$scope.email=$scope.user.email,$scope.status=$scope.user.status?"true":"false",$scope.supervisor=$scope.user.supervisor,$scope.lastUpdated=moment($scope.user.updated).tz("America/New_York"),$scope.user.editor?$scope.editor=" by ["+$scope.user.editor.username+"]":$scope.editor="",$scope.user.sites){for(var i=0;i<$scope.user.sites.length;i++)$scope.sites.push({id:$scope.user.sites[i]});$scope.onSiteSelected()}else $scope.sites=[];if($scope.user.checklists)for(var i=0;i<$scope.user.checklists.length;i++)$scope.checklists.push({id:$scope.user.checklists[i]});else $scope.checklists=[]},$scope.cancel=function(){$location.path("users")},$scope.randomPassword=function(length){for(var chars="abcdefghijklmnopqrstuvwxyz!@#$%^&*()-+<>ABCDEFGHIJKLMNOP1234567890",pass="",x=0;x<length;x++){var i=Math.floor(Math.random()*chars.length);pass+=chars.charAt(i)}return pass},$scope.deactivateNew=function(){var selectedUsers=[$scope.user],modalInstance=$modal.open({controller:"UserInactivateModalCtrl",templateUrl:"modules/users/views/admin/modal-confirm.html",resolve:{selectedUsers:function(){return selectedUsers},makeActivate:function(){return!1}}});modalInstance.result.then(function(modalResult){$http.post("/users/deactivate/"+$scope.user._id).success(function(response){console.log("success"),$location.path("users")}).error(function(response){console.log("error: ",response),$location.path("users")})},function(){})},$scope.activateNew=function(){var selectedUsers=[$scope.user],modalInstance=$modal.open({controller:"UserInactivateModalCtrl",templateUrl:"modules/users/views/admin/modal-confirm.html",resolve:{selectedUsers:function(){return selectedUsers},makeActivate:function(){return!0}}});modalInstance.result.then(function(modalResult){$http.post("/users/activate/"+$scope.user._id).success(function(response){console.log("success"),$location.path("users")}).error(function(response){console.log("error: ",response),$location.path("users")})},function(){})}}]),angular.module("users").controller("UserInactivateModalCtrl",["$scope","$modalInstance","selectedUsers","makeActivate",function($scope,$modalInstance,selectedUsers,makeActivate){$scope.selectedUsers=selectedUsers,$scope.makeActivate=makeActivate,console.log($scope.makeActivate),$scope.ok=function(){$modalInstance.close("ok")},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.isNewPasswordValid=!1,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http.delete("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.becomeAdmin=function(){$scope.user.role="superadmin",$scope.updateUserProfile(!0)},$scope.verifyNewPassword=function(){$scope.passwordDetails.newPassword==$scope.passwordDetails.verifyPassword?($scope.isNewPasswordValid=!0,$scope.error=""):($scope.isNewPasswordValid=!1,$scope.error="New passwords do not match.")},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$scope.verifyNewPassword(),$scope.isNewPasswordValid&&$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("UsersController",["$scope","$http","$stateParams","$location","Authentication","Users","UserSrv","UserRole","UsersByCompany","PersistSortService","$modal",function($scope,$http,$stateParams,$location,Authentication,Users,UserSrv,UserRole,UsersByCompany,PersistSortService,$modal){$scope.userRoles=["superadmin","administrator"],$scope.authentication=Authentication,$scope.isSuperAdmin=Authentication.user.role===UserRole.Superadmin,$scope.isHideInactivateUsers=!0,$scope.lastUpdated=moment().tz("America/New_York"),$scope.sortColumn={username:!1,company:!1,lastName:!0,firstName:!1,role:!1,email:!1,status:!1},$scope.addNew=function(){$location.path("users/new")},$scope.persistSort=function(item){1==$scope.sortColumn[item]?($scope.sortColumn={username:!1,company:!1,lastName:!1,firstName:!1,role:!1,email:!1,status:!1},$scope.sortColumn[item]="reverse"):0==$scope.sortColumn[item]?($scope.sortColumn={username:!1,company:!1,lastName:!1,firstName:!1,role:!1,email:!1,status:!1},$scope.sortColumn[item]=!0):"reverse"==$scope.sortColumn[item]&&($scope.sortColumn={username:!1,company:!1,lastName:!1,firstName:!1,role:!1,email:!1,status:!1},$scope.sortColumn[item]=!1),PersistSortService.set("user_sort",$scope.sortColumn)},$scope.deactivateUsers=function(){var selectedUsers=$scope.users.filter(function(item){return item.selected===!0});if(0!==selectedUsers.length){var modalInstance=$modal.open({controller:"UserInactivateModalCtrl",templateUrl:"modules/users/views/admin/modal-confirm.html",resolve:{selectedUsers:function(){return selectedUsers},makeActivate:function(){return!1}}});modalInstance.result.then(function(modalResult){for(var i=$scope.users.length;i--;)$scope.users[i].selected&&($http.post("/users/deactivate/"+$scope.users[i]._id).success(function(response){console.log("success")}).error(function(response){console.log("error: ",response)}),$scope.users[i].status=!1,$scope.users[i].selected=!1,$scope.users.forEach(function(item){item.supervisor&&item.supervisor._id===$scope.users[i]._id&&(item.supervisor=null)}))},function(){})}},$scope.editUser=function(user){$location.path("users/"+user._id+"/edit")},$scope.find=function(){PersistSortService.get("user_sort")&&($scope.sortColumn=PersistSortService.get("user_sort")),$scope.userRoles.indexOf(Authentication.user.role)<0&&$location.path("/"),$scope.isSuperAdmin?$scope.findAll():$scope.findByCompany()},$scope.findAll=function(){$http.get("/users/all").success(function(response){$scope.users=response,$scope.safeUsers=response}).error(function(response){$scope.error=response.message,console.log("error: ",response)})},$scope.findByCompany=function(){$scope.users=$scope.safeUsers=UsersByCompany.query({companyId:Authentication.user.company})},$scope.sortByStatus=function(row){return!row.status},$scope.findOne=function(){$scope.company=Users.get({userId:$stateParams.userId})}}]),angular.module("users").factory("Authentication",["$window",function($window){var auth={user:$window.user};return auth}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users/:userId",{userId:"@_id"},{update:{method:"PUT"},edit:{method:"POST"}})}]).factory("UsersByCompany",["$resource",function($resource){return $resource("users/company/:companyId",{companyId:"@companyId"})}]).factory("InspectorsByCompany",["$resource",function($resource){return $resource("users/inspector/:companyId",{companyId:"@companyId"})}]).factory("SupervisorsByCompany",["$resource",function($resource){return $resource("users/supervisor/:companyId",{companyId:"@companyId"})}]).factory("InspectorsByChecklist",["$resource",function($resource){return $resource("inspectors/:checklistId",{checklistId:"@checklistId"})}]).service("UserSrv",function(){this.user={}});